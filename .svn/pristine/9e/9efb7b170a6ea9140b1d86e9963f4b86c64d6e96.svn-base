using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
//using System.ComponentModel;
using System.Data;
using System.Data.Common;
using ASUTP.Database;
using ASUTP.Helper;


namespace StatisticCommon
{
    public struct HStatisticUser
    {
        public HStatisticUsers.ID_ROLES Role;

        public int Id;
    }

    public class HStatisticUsers : ASUTP.Helper.HUsers
    {
        /// <summary>
        /// Перечисление - идентификаторы групп(ролей) пользователей
        /// </summary>
        public enum ID_ROLES { UNKNOWN, KOM_DISP = 1, ADMIN, USER, NSS = 101, MAJOR_MASHINIST, MASHINIST, LK_DISP = 201, SOURCE_DATA = 501
            , COUNT_ID_ROLES = 7
        };

        /// <summary>
        /// Перечисление - идентификаторы настраиваемых параметров профиля пользователя
        /// </summary>
        public enum ID_ALLOWED {
            UNKNOWN = -1
            , SOURCEDATA_CHANGED = 1 //Вкл\выкл группу пунктов меню
            , TAB_PBR_KOMDISP
            , AUTO_TAB_PBR_KOMDISP
            , ALARM_KOMDISP
            , AUTO_ALARM_KOMDISP
            , TAB_PBR_NSS
            , MENUITEM_SETTING_ADMIN_DB_CONGIG
            , MENUITEM_SETTING_ADMIN_DB_SOURCEDATA
            , MENUITEM_SETTING_ADMIN_STATEUSERS
            , MENUITEM_SETTING_ADMIN_PSW_KOMDISP_CHANGE
            //----------10
            , MENUITEM_SETTING_ADMIN_PSW_ADMIN_CHANGE
            , MENUITEM_SETTING_ADMIN_PSW_NSS_CHANGE
            , MENUITEM_SETTING_ADMIN_TECCOMPONENT_CHANGE
            , MENUITEM_SETTING_ADMIN_USERS_CHANGE
            , MENUITEM_SETTING_ADMIN_ROLES_ALLOWED_CHANGE
            , MENUCONTEXTITEM_PANELQUICKDATA_FORECASTEE
            , MENUCONTEXTITEM_PANELQUICKDATA_TMVALUES
            , MENUCONTEXTITEM_TABLEHOURS_COLUMN_59MIN
            , MENUITEM_SETTINGS_PARAMETERS_APP
            , MENUITEM_SETTINGS_PARAMETERS_TGBIYSK
            //--------------------20
            , APP_AUTO_RESET
            , SOURCEDATA_ASKUE_PLUS_SOTIASSO //Вкл\выкл пункт меню
            , MENUITEM_SETTING_PARAMETERS_SYNC_DATETIME_DB
            , PROFILE_SETTINGS_CHANGEMODE
            , PROFILE_VIEW_ADDINGTABS
            , SOURCEDATA_SOTIASSO_3_MIN //Вкл\выкл пункт меню
            , AUTO_LOADSAVE_USERPROFILE //Автоматическая загрузка/сохранение профиля
            //, AUTO_LOAD_ADMINVALUESDEFAULT //Автоматическая загрузка "рекомендаций" по умолчанию
            , MENUITEM_VIEW_VALUES_SOTIASSO //!!! TAB_PAGE
            , MENUITEM_SETTING_PARAMETERS_DIAGNOSTIC
            , AUTO_TAB_ALARM
            //------------------------------30
            , AUTO_TAB_PBR_NSS
            , TAB_LK_ADMIN // доступ к стандартной вкладке регламентируется идентификатором ЛК
            , AUTO_TAB_LK_ADMIN
            , MENUITEM_VIEW_VZLET_TDIRECT //!!! TAB_PAGE
            , TAB_TEPLOSET_ADMIN //!!! TAB_PAGE - доступ к стандартной вкладке регламентируется идентификатором ЛК
            , AUTO_TAB_TEPLOSET_ADMIN
            // KhryapinAN, 2017-06
            , MENUITEM_VIEW_VALUES_AIISKUE_SOTIASSO_DAY //!!! TAB_PAGE
            // KhryapinAN, 2017-09
            , EXPORT_PBRVALUES_KOMDISP
            , AUTO_EXPORT_PBRVALUES_KOMDISP
            //---------------------------------------39
            , PROFILE_VIEW_COLOR_CHANGESHEMA_BACKGROUND = 40 // цвет компонента схемы - фон
            , PROFILE_VIEW_COLOR_SHEMA // разрешение на изменение цветовой схемы в целом, по сути признак использования системной или пользовательской схемы
            , PROFILE_VIEW_COLOR_CHANGESHEMA_FONT // цвет компонента схемы - шрифт
            , PBR_HOUR_TO_HOUR //Вкл\выкл элемент управления
            , PBR_HOUR_TO_HOUR_DEFAULT_VALUE //Отображать/скрывать 
            // KhryapinAN, 2018-08
            , MENUITEM_VIEW_GRASP = 45 //!!! TAB_PAGE
        };

        public enum ERROR_CODE_EX
        {
            QUERY_FAILED_EX = ERROR_CODE.QUERY_FAILED
            , USER_NOT_FOUND_EX = ERROR_CODE.UDN_NOT_FOUND
            , NOT_CONNECT_CONFIGDB_EX = ERROR_CODE.NOT_CONNECT_CONFIGDB
            , SETUP_FAILED = -5
            , PROFILE_UNIT_NOT_ALLOWED = -6
            , UNKNOWN = -1
            , Ok = 0
            , NOT_DEFINED
        }

        public struct STATE
        {
            public HStatisticUsers.ID_ALLOWED IdValidation;

            public ERROR_CODE_EX? Code { get; set; }

            public string Message;
        }

        public static STATE Ready;

        public static bool IsVerified
        {
            get
            {
                return (Equals (Ready.Code, null) == false)
                    && (!((int)Ready.Code < 0));
            }
        }

        public HStatisticUsers(int iListenerId, MODE_REGISTRATION modeRegistration, bool bBaseClassThrowHandled = false)
            : base(iListenerId, modeRegistration)
        {
            Ready = new STATE { IdValidation = ID_ALLOWED.UNKNOWN, Code = ERROR_CODE_EX.NOT_DEFINED, Message = string.Empty };

            if (bBaseClassThrowHandled == false)
                Initialize (@"роль: " + Role);
            else if (bBaseClassThrowHandled == true) {
                try {
                    Initialize (@"роль: " + Role);

                    Ready.Code = ERROR_CODE_EX.Ok;
                } catch (HException e) {
                    Ready.Code = (ERROR_CODE_EX)(ERROR_CODE)e.m_code;
                    Ready.Message = e.Message;
                } catch (Exception e) {
                    Ready.Code = ERROR_CODE_EX.UNKNOWN;
                    Ready.Message = e.Message;
                } finally {
                }
            } else
                ;
        }

        public HStatisticUsers(int iListenerId, string modeRegistration, bool bBaseClassThrowHandled = false)
            : this (iListenerId, Enum.IsDefined(typeof(MODE_REGISTRATION), modeRegistration) == true ? (MODE_REGISTRATION)Enum.Parse(typeof(MODE_REGISTRATION), modeRegistration) : MODE_REGISTRATION.MIXED, bBaseClassThrowHandled)
        {
        }

        public HStatisticUsers(int iListenerId)
            : this(iListenerId, MODE_REGISTRATION.USER_DOMAINNAME)
        {
        }

        private HStatisticUsers ()
            : base (-1)
        {
        }

        public static ID_ROLES Role
        {
            get
            {
                return (s_DataRegistration == null) ? ID_ROLES.UNKNOWN : ((!((int)INDEX_REGISTRATION.ID_TEC < s_DataRegistration.Length)) || (s_DataRegistration[(int)INDEX_REGISTRATION.ROLE] == null)) ? ID_ROLES.ADMIN : (ID_ROLES)s_DataRegistration[(int)INDEX_REGISTRATION.ROLE];
            }
        }

        public static bool RoleIsKomDisp
        {
            get
            {
                return Role == ID_ROLES.KOM_DISP;
            }
        }

        public static bool RoleIsDisp
        {
            get
            {
                return ((Role == ID_ROLES.ADMIN) || (Role == ID_ROLES.KOM_DISP) || (Role == ID_ROLES.NSS) ||  (Role == ID_ROLES.LK_DISP));
            }
        }

        public static bool RoleIsAdmin
        {
            get
            {
                return Role == ID_ROLES.ADMIN;
            }
        }

        //public static bool RoleIsNSS
        //{
        //    get
        //    {
        //        return Role == ID_ROLES.NSS;
        //    }
        //}

        //public static bool RoleIsOperationPersonal
        //{
        //    get
        //    {
        //        return (Role == ID_ROLES.NSS) || (Role == ID_ROLES.MAJOR_MASHINIST) || (Role == ID_ROLES.MASHINIST);
        //    }
        //}

        public static void SetAllowed (ConnectionSettings connSett, ID_ALLOWED id, string value)
        {
            int iListenerId = -1;

            iListenerId = DbSources.Sources ().Register (connSett, false, string.Format(@"{0}==HStatisticUsers::SetAllowed(id={1}, value={2})", connSett.name, id.ToString(), value));
            HUsers.SetAllowed (iListenerId, (int)id, value);
            DbSources.Sources ().UnRegister (iListenerId);
        }
    }
}
