using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
//using System.Data;

using System.Windows.Forms; //..., CheckBox

//using HClassLibrary;
using StatisticCommon;
using ASUTP.Core;
using ASUTP.Database;
using ASUTP.PlugIn;
using ASUTP.Control;
using ASUTP;
using ASUTP.Forms;
using SAlarm.Service;
using StatisticCommon.Contract.Alarm;

namespace StatisticAlarm
{
    /// <summary>
    /// Класс панели для отображения с списка событий
    /// </summary>
    public partial class PanelAlarm : PanelStatistic, ASUTP.PlugIn.IDataHost, IDisposable
    {        
        private class CheckedListBoxTypeAlarm : CheckedListBox, IControlFilter
        {
            public const TYPE_ALARM AlarmedDefault = TYPE_ALARM.TG_TURNONOFF | TYPE_ALARM.APOWER | TYPE_ALARM.FREQ;

            public class CheckedListBoxTypeAlarmItem
            {
                public TYPE_ALARM Tag { get; set; }

                public string Text { get; }

                public CheckState State { get; set; }

                public bool Enabled { get; set; }

                public CheckedListBoxTypeAlarmItem (TYPE_ALARM tag, bool bChecked = false, bool bEnabled = true)
                {
                    Tag = tag;

                    Text = tag.NameShr ();

                    State = bChecked == true ? CheckState.Checked
                        : bChecked == false ? CheckState.Unchecked
                            : CheckState.Indeterminate;

                    Enabled = bEnabled;
                }

                public override string ToString ()
                {
                    return Text;
                }
            }

            public event DelegateIndexFilterObjectFunc EventFilter;

            public void PerformEventFilter (INDEX_FILTER indxFilter, object obj)
            {
                EventFilter?.Invoke (indxFilter, obj);
            }

            private List<int>  _disabledIndexes;

            public CheckedListBoxTypeAlarm ()
                : base ()
            {
                _disabledIndexes = new List<int> ();

                ItemCheck += onItemCheck;
            }

            public void Add (CheckedListBoxTypeAlarmItem item)
            {
                if (item.Enabled == false)
                    _disabledIndexes.Add (Items.Count);
                else
                    ;

                Items.Add (item, item.State);
            }

            public void AddRange (IEnumerable <CheckedListBoxTypeAlarmItem> items)
            {
                items.ToList ().ForEach (item => Add (item));
            }

            public TYPE_ALARM Alarmed
            {
                get
                {
                    return getAlarmed (-1, CheckState.Indeterminate);
                }
            }

            private TYPE_ALARM getAlarmed (int indxItem, CheckState newValueItem)
            {
                TYPE_ALARM alarmRes = TYPE_ALARM.UNKNOWN;
                CheckState value = CheckState.Indeterminate;

                for (int i = 0; i < Items.Count; i++) {

                    if (i == indxItem)
                        value = newValueItem;
                    else
                        value = (Items[i] as CheckedListBoxTypeAlarmItem).State;

                    if (value == CheckState.Checked)
                        alarmRes |= (Items[i] as CheckedListBoxTypeAlarmItem).Tag;
                    else
                        ;
                }

                return alarmRes;
            }

            private void onItemCheck (object obj, ItemCheckEventArgs ev)
            {
                if ((Items[ev.Index] as CheckedListBoxTypeAlarmItem).Enabled == true)
                    EventFilter?.Invoke (INDEX_FILTER.TYPE_ALARM, getAlarmed (ev.Index, ev.NewValue));
                else
                    System.Threading.Tasks.Task.Factory.StartNew (() => SetItemChecked(ev.Index, ev.CurrentValue == CheckState.Checked));
            }

            public void SetEnable(int index, bool bEnabled)
            {
                bool bIsContains = false;

                bIsContains = _disabledIndexes.Contains (index);
                ((CheckedListBoxTypeAlarmItem)Items [index]).Enabled = bEnabled;

                if ((bIsContains == false) && (bEnabled == false))
                    _disabledIndexes.Add (index);
                else if ((bIsContains == true) && (bEnabled == true))
                    _disabledIndexes.Remove (index);
                else if (((bIsContains == true) && (bEnabled == false))
                    || ((bIsContains == false) && (bEnabled == true)))
                    ;

                _disabledIndexes.Add (index);
                this.Refresh();
            }

            protected override void OnDrawItem(DrawItemEventArgs e)
            {
                CheckedListBoxTypeAlarmItem item = (CheckedListBoxTypeAlarmItem)Items[e.Index];

                if (_disabledIndexes.Contains(e.Index)) {
                    System.Windows.Forms.VisualStyles.CheckBoxState state = ((item.State == CheckState.Checked) && (item.Enabled == false)) ? System.Windows.Forms.VisualStyles.CheckBoxState.CheckedDisabled
                        : ((item.State == CheckState.Checked) && (item.Enabled == true)) ? System.Windows.Forms.VisualStyles.CheckBoxState.CheckedNormal
                        : ((item.State == CheckState.Unchecked) && (item.Enabled == false)) ? System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled
                        : ((item.State == CheckState.Unchecked) && (item.Enabled == true)) ? System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal
                            : System.Windows.Forms.VisualStyles.CheckBoxState.MixedNormal;
                    Size glyphSize = CheckBoxRenderer.GetGlyphSize(e.Graphics, state);
                    CheckBoxRenderer.DrawCheckBox(
                        e.Graphics,
                        new Point(e.Bounds.X + 1, e.Bounds.Y + 1), // add one pixel to align the check gliph properly
                        new Rectangle(
                            new Point(e.Bounds.X + glyphSize.Width + 3, e.Bounds.Y), // add three pixels to align text properly
                            new Size(e.Bounds.Width - glyphSize.Width, e.Bounds.Height)),
                        item.ToString (),
                        this.Font,
                        TextFormatFlags.Left, // text is centered by default
                        false,
                        state); 
                }
                else {
                    base.OnDrawItem(e);
                }
            }
        }

        /// <summary>
        /// Список объектов ТЭЦ
        /// </summary>
        private List<TEC> m_list_tec;
        ///// <summary>
        ///// Список идентификаторов компонентов ТЭЦ (ГТП), отображающихся в списке 'Компоненты ТЭЦ'
        ///// </summary>
        //private List <int> m_listIdTECComponents;
        /// <summary>
        /// Объект проверки условий выполнения сигнализаций типов "Мощность ГТП", "ТГ вкл./откл."
        ///  , чтения/записи списка событий в БД
        /// </summary>
        private AdminAlarm m_adminAlarm;
        /// <summary>
        /// Событие изменения даты, начала и окончания для запроса списка событий сигнализаций
        /// </summary>
        private AdminAlarm.DatetimeCurrentEventHandler delegateDatetimeChanged;
        /// <summary>
        /// Делегат для обработки события установка/снятие признака "Включено"
        ///  для всех режимов работы (SERVICE, ADMIN, VIEW)
        /// </summary>
        private DelegateBoolFunc delegateWorkCheckedChanged;
        /// <summary>
        /// Событие для оповещения пользователя о событии сигнализаций (новое/повтор)
        /// </summary>
        public event AlarmNotifyEventHandler EventGUIReg;
        /// <summary>
        /// Ширина панели для размещения активных элементов управления
        /// </summary>
        private int _widthPanelManagement = 166;

        /// <summary>
        /// Конструктор - основной (с параметрами)
        /// </summary>
        /// <param name="markQueries">Массив признаков кстановления связи с тем или иным источником данных</param>
        /// <param name="mode">Режим работы панели</param>
        /// <param name="foreColor">Цвет шрифта панели и всех дочерних элементов управления</param>
        /// <param name="backColor">Цвет фона панели и всех дочерних элементов управления</param>
        public PanelAlarm (ASUTP.Core.HMark markQueries, SAlarm.Service.AdminAlarm.MODE mode, Color foreColor, Color backColor)
            : base(MODE_UPDATE_VALUES.AUTO, foreColor, backColor)
        {
            //Инициализация собственных значений
            initialize(markQueries, mode);

            performEventFilter ();

            findControl(INDEX_CONTROL.DGV_EVENTS.ToString()).BackColor =
            findControl (INDEX_CONTROL.DGV_DETAIL.ToString ()).BackColor =
                backColor;
        }

        /// <summary>
        /// Конструктор - дополнительный (с параметрами)
        /// </summary>
        /// <param name="container">См. документацию на 'Control'</param>
        /// <param name="markQueries">Массив признаков кстановления связи с тем или иным источником данных</param>
        /// <param name="mode">Режим работы панели</param>
        /// <param name="foreColor">Цвет шрифта</param>
        /// <param name="backColor">Цвет фона</param>
        public PanelAlarm (IContainer container, HMark markQueries, SAlarm.Service.AdminAlarm.MODE mode, Color foreColor, Color backColor)
            : base (MODE_UPDATE_VALUES.AUTO, foreColor, backColor)
        {
            container.Add(this);
            //Инициализация собственных значений
            initialize(markQueries, mode);

            performEventFilter ();
        }

        /// <summary>
        /// Инициализация собственных параметров
        /// </summary>
        /// <param name="markQueries">Массив признаков кстановления связи с тем или иным источником данных</param>
        /// <param name="mode">Режим работы панели</param>
        private int initialize(ASUTP.Core.HMark markQueries, SAlarm.Service.AdminAlarm.MODE mode)
        {
            int err = -1 //Признак выполнения метода/функции
                         ////Зарегистрировать соединение/получить идентификатор соединения
                         //, iListenerId = DbSources.Sources().Register(FormMain.s_listFormConnectionSettings[(int)CONN_SETT_TYPE.CONFIG_DB].getConnSett(), false, @"CONFIG_DB")
                ;
            bool bWorkChecked = false;
            ConnectionSettings connSett = null;
            List<FormChangeMode.KeyDevice> filterKeyDevice;

            //Инициализация визуальных компонентов
            InitializeComponent();

            try {
                bWorkChecked = ((HStatisticUsers.IsAllowed((int)HStatisticUsers.ID_ALLOWED.AUTO_ALARM_KOMDISP) == true)
                        && (mode.HasFlag (SAlarm.Service.AdminAlarm.MODE.NOTIFY) == true))
                    || (mode.HasFlag (AdminAlarm.MODE.REGISTER) == true);
                //Инициализация списка с ТЭЦ
                m_list_tec = DbTSQLConfigDatabase.DbConfig ().InitTEC(new int[] { 0, (int)TECComponent.ID.LK }, false, HStatisticUsers.Area.m_id);
                //Инициализация
                connSett = new ConnectionSettings(DbTSQLConfigDatabase.DbConfig ().GetDataTableConnSettingsOfIdSource (FormMainBase.s_iMainSourceData
                        , -1
                        , out err).Rows[0]
                    , -1);
            } catch (Exception e) {
                Logging.Logg().Exception(e, string.Format("PanelAlarm::initialize () - отсутствуют строки в результате запроса необходимых значений параметров соединения с БД...")
                    , Logging.INDEX_MESSAGE.NOT_SET);
            }
            
            if ((!(err < 0))
                && (Equals(connSett, null) == false)) {
                //??? тоже следует читать из БД конфигурации
                AdminAlarm.ConstantReport.MaskDocument = @"ПБР-Факт-Статистика";
                AdminAlarm.ConstantReport.MaskExtension = @"xlsx";
                AdminAlarm.ConstantReport.NumberRow_0 = 7;
                AdminAlarm.ConstantReport.Format_Date = "dd.MM.yyyy HH:mm";
                AdminAlarm.ConstantReport.NumberColumn_Date = 1;
                AdminAlarm.ConstantReport.NumberRow_Date = 5;

                initAdminAlarm (connSett
                    , mode
                    , markQueries
                    , bWorkChecked);
                //Назначить делегаты при изменении:
                // даты, часов начала, окончания для запроса списка событий
                delegateDatetimeChanged = new AdminAlarm.DatetimeCurrentEventHandler(m_adminAlarm.OnEventDatetimeChanged);
                // признака вкл./выкл.
                delegateWorkCheckedChanged = new DelegateBoolFunc(m_adminAlarm.OnWorkCheckedChanged);

                #region Элементы управления
                Control ctrl = null;
                
                #region Древовидный список филиалы-ТЭЦ-ГТП-ТГ
                ctrl = find(INDEX_CONTROL.TREEVIEW_TECCOMPONENT);
                m_list_tec.ForEach (t => (ctrl as TreeViewTECComponent).AddTEC (t));
                filterKeyDevice = (ctrl as TreeViewTECComponent).KeyDeviceCheckedIndices;
                //(ctrl as TreeView).ExpandAll ();
                (ctrl as TreeViewTECComponent).SelectRoot ();
                #endregion

                //Запустить на выполнениие (при необходимости) таймер для обновления значений в таблице
                ctrl = find(INDEX_CONTROL.CBX_WORK) as CheckBox;
                (ctrl as CheckBox).Checked = bWorkChecked;
                (ctrl as CheckBox).Enabled = mode.HasFlag (AdminAlarm.MODE.NOTIFY) == true;
                //TODO: почему именно в этом месте? - Назначить обработчик события изменение даты
                (find(INDEX_CONTROL.MCLDR_CURRENT) as MonthCalendar).DateChanged += new DateRangeEventHandler(onEventDateChanged);
                //Назначить обработчик событий при изменении признака "Включено/отключено"
                (ctrl as CheckBox).CheckedChanged += new EventHandler(cbxWork_OnCheckedChanged);
                //Установить доступность элементов управления по изменению коэффициентов ГТП (вычисление пороговых значений при проверке выполнения условий сигнализации "Тек./мощность ГТП")
                (find(INDEX_CONTROL.NUD_HOUR_BEGIN) as NumericUpDown).Enabled =
                (find(INDEX_CONTROL.NUD_HOUR_END) as NumericUpDown).Enabled =
                     false; //mode == MODE.ADMIN;

                #region Список типов
                ctrl = find(INDEX_CONTROL.CLB_TYPEALARM);
                (ctrl as CheckedListBoxTypeAlarm).Add (new CheckedListBoxTypeAlarm.CheckedListBoxTypeAlarmItem (TYPE_ALARM.CUR_POWER, CheckedListBoxTypeAlarm.AlarmedDefault.HasFlag (TYPE_ALARM.CUR_POWER), false));
                (ctrl as CheckedListBoxTypeAlarm).Add (new CheckedListBoxTypeAlarm.CheckedListBoxTypeAlarmItem (TYPE_ALARM.TG_TURNONOFF, CheckedListBoxTypeAlarm.AlarmedDefault.HasFlag (TYPE_ALARM.TG_TURNONOFF), false));
                (ctrl as CheckedListBoxTypeAlarm).Add (new CheckedListBoxTypeAlarm.CheckedListBoxTypeAlarmItem (TYPE_ALARM.APOWER, CheckedListBoxTypeAlarm.AlarmedDefault.HasFlag (TYPE_ALARM.APOWER), true));
                (ctrl as CheckedListBoxTypeAlarm).Add (new CheckedListBoxTypeAlarm.CheckedListBoxTypeAlarmItem (TYPE_ALARM.FREQ, CheckedListBoxTypeAlarm.AlarmedDefault.HasFlag (TYPE_ALARM.FREQ), true));
                // зарегистрировать обработчик изменения фильтра по типам сигнализации
                (ctrl as IControlFilter).EventFilter += new DelegateIndexFilterObjectFunc((find (INDEX_CONTROL.DGV_EVENTS) as DataGridViewAlarmJournal).OnEventFilter);
                #endregion

                ctrl = find (INDEX_CONTROL.DGV_EVENTS);
                // зарегистрировать обработчик изменения фильтра по оборудованию
                (find (INDEX_CONTROL.TREEVIEW_TECCOMPONENT) as IControlFilter).EventFilter += new DelegateIndexFilterObjectFunc((ctrl as DataGridViewAlarmJournal).OnEventFilter);
                //Назначить обработчик события при получении из БД списка событий (передать список для отображения)
                m_adminAlarm.EventListEventDate += new Action<IEnumerable<Tuple <FormChangeMode.KeyDevice, AdminAlarm.ViewAlarmBase>>>((ctrl as DataGridViewAlarmJournal).OnEventListEventDate);
                (ctrl as DataGridViewAlarmJournal).EventConfirmed += new DelegateObjectFunc(OnEventConfirm);
                (ctrl as DataGridViewAlarmJournal).EventFixed += new DelegateObjectFunc(OnEventFixed); // только в режиме 'SERVICE'
                (ctrl as DataGridViewAlarmJournal).EventSelected += new DelegateObjectFunc (dgvJournal_OnSelectionChanged);
                ctrl.Tag = new DataGridViewAlarmJournal.Environment () { Stamp = HDateTime.ToMoscowTimeZone().Date, WorkChanged = bWorkChecked }; //!!! для определения возможности вкл./откл. элементов управления

                ////Назначить обработчика для события - очистить таблицу по требованию (при отсутствии строк в основной таблице)
                //(ctrl as DataGridViewAlarmJournal).EventClearDetail += new DelegateFunc((find (INDEX_CONTROL.DGV_DETAIL) as DataGridViewAlarmDetail).OnEventClear);

                ctrl = find(INDEX_CONTROL.DGV_DETAIL);
                m_adminAlarm.EventDetailEvents += new Action<IEnumerable<Tuple <FormChangeMode.KeyDevice, AdminAlarm.ViewAlarmBase>>>((ctrl as DataGridViewAlarmDetail).OnEventListEventDate);
                // зарегистрировать обработчик изменения фильтра по оборудованию
                (find (INDEX_CONTROL.TREEVIEW_TECCOMPONENT) as IControlFilter).EventFilter += new DelegateIndexFilterObjectFunc((ctrl as DataGridViewAlarmDetail).OnEventFilter);
                #endregion

                //Старт в любом режиме с учетом '(ctrl as CheckBox).Checked'
                // SERVICE - БД_значений-ДА, таймер-ДА/НЕТ, оповещение (список)-ДА/НЕТ, оповещение (сигнализация)-НЕТ
                // ADMIN - БД_значений-ДА, таймер-ДА/НЕТ, оповещение (список)-ДА/НЕТ, оповещение (сигнализация)-ДА/НЕТ
                // VIEW - БД_значений-ДА, таймер-ДА/НЕТ, оповещение (список)-ДА/НЕТ, оповещение (сигнализация)-НЕТ
                startAdminAlarm ();
            } else
                ;

            if (err < 0)
                throw new InvalidOperationException("PanelAlarm::initialize () - объект не был создан...");
            else
                ;

            return err;
        }

        private void performEventFilter ()
        {
            Control ctrl;

            ctrl = find (INDEX_CONTROL.TREEVIEW_TECCOMPONENT);
            //Установить фильтр отображения - идентификаторы компонентов
            (((IControlFilter)ctrl)).PerformEventFilter (INDEX_FILTER.KEY_DEVICE, (ctrl as TreeViewTECComponent).KeyDeviceCheckedIndices);

            ctrl = find (INDEX_CONTROL.CLB_TYPEALARM);
            (((IControlFilter)ctrl)).PerformEventFilter (INDEX_FILTER.TYPE_ALARM, (ctrl as CheckedListBoxTypeAlarm).Alarmed);
        }

        /// <summary>
        /// Запустить на выполнение 
        /// </summary>
        public override void Start()
        {            
            base.Start ();

            ////Отладка
            //EventGUIReg (@"раз-раз");
            //EventGUIReg(@"два-два");
        }

        public override void SetDelegateWait (DelegateFunc dStart, DelegateFunc dStop, DelegateFunc dStatus)
        {
            base.SetDelegateWait (dStart, dStop, dStatus);

            m_adminAlarm.SetDelegateWait (dStart, dStop, dStatus);
        }

        public override void SetDelegateReport(DelegateStringFunc ferr, DelegateStringFunc fwar, DelegateStringFunc fact, DelegateBoolFunc fclr)
        {
            m_adminAlarm.SetDelegateReport(ferr, fwar, fact, fclr);
        }

        /// <summary>
        /// Запустить на выполнение объект регистрации выполнения условий сигнализаций
        ///  , чтения/записи/обновления списка событий в БД
        /// </summary>
        private void startAdminAlarm()
        {
            //Инициализировать (при необходимости) объект
            if (!(m_adminAlarm == null))
                //Проверить состояние, позволяющее запуск на выполнение 
                if (m_adminAlarm.IsStarted == false)
                    m_adminAlarm.Start(); // запустить на выполнение
                else ;
            else ;
        }     

        /// <summary>
        /// Остановить панель, и все связанные с ней объекты
        /// </summary>
        public override void Stop() 
        {
            //??? останавливать связанные объекты нельзя
            // т.к. даже при закрытой вкладке должно присходить оповещение
            // можно лишь прекратиить обновление таблицы со списком событий
            // , но это, вероятно, уже выполнено при вызове Activate(false)
            m_adminAlarm.Activate(false);
            base.Stop ();
        }

        private void onDisposed(object obj, EventArgs ev)
        {
            //Остановить объект "обзор, регистрация событий"
            if (!(m_adminAlarm == null))
                if (m_adminAlarm.IsStarted == true) {
                    m_adminAlarm.Activate(false);
                    m_adminAlarm.Stop();
                } else
                    ;
            else
                ;
        }

        /// <summary>
        /// Активировать/деактивировать панель
        /// </summary>
        /// <param name="activate">Признак активации/деактивации</param>
        /// <returns>Признак результата выполнения операции (Изменено/не_изменено стостояние)</returns>
        public override bool Activate(bool activate)
        {
            //Получтить признак изменения стостояния базовой панели
            bool bRes = base.Activate (activate);
            //Проверить признак изменения стостояния базовой панели
            if (bRes == true)
                //Только при изменении состояния базовой панели
                m_adminAlarm.Activate(activate);
            else
                ;

            return bRes;
        }

        /// <summary>
        /// Инициалировать параметры контэйнеров-столбцов, контэйнеров-строк
        /// </summary>
        /// <param name="cols">Количество контэйнеров-столбцов</param>
        /// <param name="rows">Количество контэйнеров-строк</param>
        protected override void initializeLayoutStyle(int cols = -1, int rows = -1)
        {
            this.ColumnCount = cols;
            this.RowCount = rows;

            this.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, _widthPanelManagement));
            this.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));

            this.RowStyles.Add(new RowStyle(SizeType.AutoSize));
        }

        /// <summary>
        /// Инициализация объекта регистрации выполнения условий сигнализаций
        /// </summary>
        /// <param name="connSett">Объект с параметрами соединения</param>
        /// <param name="mode">Режим работы</param>
        /// <param name="markQueries">Признак необходимости опроса БД значений</param>
        /// <param name="bWorkChecked">Признак необходимости: для SERVICE - (не)регистрировать события; для ADMIN - (не)оповещать о возникновении событий; для VIEW - ??? не имеет значения</param>
        private void initAdminAlarm(ConnectionSettings connSett, SAlarm.Service.AdminAlarm.MODE mode, ASUTP.Core.HMark markQueries, bool bWorkChecked)
        {
            m_adminAlarm = new AdminAlarm(connSett
                , mode
                , new AdminAlarm.DatetimeCurrentEventArgs(DateCurrent, HourBegin, HourEnd)
                , TYPE_ALARM.TG_TURNONOFF | TYPE_ALARM.FREQ | TYPE_ALARM.APOWER
                , bWorkChecked);
            m_adminAlarm.InitTEC(m_list_tec, markQueries);

            //m_adminAlarm.SetDelegateData (delegateW);
            //m_adminAlarm.SetDelegateReport ();

            m_adminAlarm.EventAdd += new AlarmNotifyEventHandler(OnViewAlarm_EventAdd);
            m_adminAlarm.EventRetry += new AlarmNotifyEventHandler(OnViewAlarm_EventRetry);

            this.EvtDataAskedHost += new DelegateObjectFunc(m_adminAlarm.OnEvtDataAskedHost);
        }

        /// <summary>
        /// Обработчик события - регистрация события сигнализации из БД!!!
        /// </summary>
        /// <param name="ev">Аргумент события</param>
        private void OnViewAlarm_EventAdd(AlarmNotifyEventArgs ev)
        {
            Console.WriteLine(@"PanelAlarm::OnViewAlarm_EventAdd (id_comp=" + ev.m_id_comp + @", message=" + ev.m_message_shr + @") - ...");

            //(IsHandleCreated/*InvokeRequired*/ == true)
            //{//...для this.BeginInvoke
                EventGUIReg(ev);
            //}
            //else
            //    Logging.Logg().Error(@"PanelAlarm::OnViewAlarm_EventAdd () - ... BeginInvoke (...) - ...", Logging.INDEX_MESSAGE.D_001);
        }

        /// <summary>
        /// Обработчик события - повтор регистрации события сигнализации из БД!!!
        /// </summary>
        /// <param name="ev">Аргумент события</param>
        private void OnViewAlarm_EventRetry(AlarmNotifyEventArgs ev)
        {
            Console.WriteLine(@"PanelAlarm::OnViewAlarm_EventRetry (id_comp=" + ev.m_id_comp + @", message=" + ev.m_message_shr + @") - ...");

            if (IsHandleCreated/*InvokeRequired*/ == true)
            {//...для this.BeginInvoke
                EventGUIReg(ev);
            }
            else
                Logging.Logg().Error(@"PanelAlarm::OnViewAlarm_EventRetry () - ... BeginInvoke (...) - ...", Logging.INDEX_MESSAGE.D_001);
        }

        /// <summary>
        /// Обработчик события - снятие с отображения 'MessageBox'
        ///  информации о событии сигнализаций
        /// </summary>
        /// <param name="obj">Аргумент события - описание события оповещения</param>
        public void OnEventFixed(object obj)
        {
            DataAskedHost (new object [] {
                new object [] {
                    AdminAlarm.StatesMachine.Fixed
                    , obj as AlarmNotifyEventArgs
                }
            });
        }

        /// <summary>
        /// Обработчик события - подтверждение события сигнализаций
        /// </summary>
        /// <param name="obj">Идентификатор события сигнализаций в БД</param>
        public void OnEventConfirm(object obj)
        {
            DataAskedHost(new object[] {
                new object [] {
                    AdminAlarm.StatesMachine.Confirm
                    , obj
                }
            });
        }

        /// <summary>
        /// Обработчик события изменения выбора строки в таблице
        ///  со списком событий сигнализаций
        /// </summary>
        /// <param name="obj">Идентификатор события сигнализаций в БД</param>
        public void dgvJournal_OnSelectionChanged(object obj)
        {
            DataAskedHost(new object[] {
                new object [] {
                    AdminAlarm.StatesMachine.Detail
                    , (long)obj
                }
            });
        }
        
        /// <summary>
        /// Найти объект-'компонент ТЭЦ' по идентификатору в локальном списке компонентов ТЭЦ
        /// </summary>
        /// <param name="id">Идентификатор для поиска</param>
        /// <returns>Объект-'компонент ТЭЦ'</returns>
        private TECComponent findGTPOfID (int id)
        {
            foreach  (TEC tec in m_list_tec)
                foreach (TECComponent comp in tec.ListTECComponents)
                    if ((comp.IsGTP == true) && (comp.m_id == id))
                        return comp;
                    else
                        ;

            return null;
        }

        /// <summary>
        /// Обработчик события изменение признака "Включено/отключено"
        /// </summary>
        /// <param name="obj">Объект, иницировавший событие</param>
        /// <param name="ev">Аргумент события</param>
        public void cbxWork_OnCheckedChanged(object obj, EventArgs ev)
        {
            CheckBox ctrl =
                obj
                //find(INDEX_CONTROL.CBX_WORK)
                    as CheckBox;

            ((DataGridViewAlarmJournal.Environment)find (INDEX_CONTROL.DGV_EVENTS).Tag).WorkChanged = ctrl.Checked;

            //??? - Активировать объект регистрации/чтения/записи/обновления списка событий
            delegateWorkCheckedChanged(ctrl.Checked);
        }

        /// <summary>
        /// Обработчик события - выбор элемента в списке компонентов ТЭЦ
        /// </summary>
        /// <param name="obj">Объект, инициировавший событие (CheckListBox)</param>
        /// <param name="ev">Аргумент события</param>
        private void fTECComponent_OnSelectedIndexChanged(object obj, TreeViewEventArgs ev)
        {
            NumericUpDown ctrl;
            TECComponent tag;
            bool bEnabled = false;
            
            //Получить идетификатор выбранного элемента древовидного списка
            tag = (find (INDEX_CONTROL.TREEVIEW_TECCOMPONENT) as TreeViewTECComponent).CurrentTECComponent;
            if (Equals (tag, null) == false)
                //Проверить индекс выбранного элемента
                //Только для настоящего компонента ТЭЦ, а не виртуального "Все компоненты"
                //Включить (при необходимости) объект со значением коэфициента
                //Для остальных, в т.ч. виртуального компонента "Все компоненты", компонентов "ТГ"
                //Выключить (при необходимости) объект со значением коэфициента - оставить знач. "как есть" (false)
                bEnabled = (tag.IsGTP == true)
                    && (m_adminAlarm.Mode.HasFlag (AdminAlarm.MODE.NOTIFY) == true);
            else
                Logging.Logg ().Warning ($@"PanekAlarm::fTECComponent_OnSelectedIndexChanged (Node={ev.Node.Text}) - идентификатор не известен...", Logging.INDEX_MESSAGE.NOT_SET);

            //Получить объект со значением коэфициента для выбранного компонента ТЭЦ
            ctrl = find(INDEX_CONTROL.NUD_KOEF) as NumericUpDown;
            if (!(ctrl.Enabled == bEnabled)) {
                ctrl.Enabled = bEnabled;

                if (bEnabled == false)
                //Отобразить значение коэффициента
                    setNudnKoeffAlarmCurPowerValue (-1);
                else
                    ;
            } else
                ;

            if (bEnabled == true)
            //Отобразить значение нового коэффициента
                setNudnKoeffAlarmCurPowerValue ();
            else
                ;
        }

        /// <summary>
        /// Отобразить значение коэффициента для выбранного элемента в списке "Компоненты ТЭЦ"
        /// </summary>
        private void setNudnKoeffAlarmCurPowerValue()
        {
            TreeViewTECComponent tree;
            TECComponent comp;

            tree = (find (INDEX_CONTROL.TREEVIEW_TECCOMPONENT) as TreeViewTECComponent);
            comp = tree.CurrentTECComponent;
            if (Equals (comp, null) == false)
                setNudnKoeffAlarmCurPowerValue (comp.m_dcKoeffAlarmPcur);
            else
                Logging.Logg ().Error ($@"PanekAlarm::setNudnKoeffAlarmCurPowerValue (SelectedNode={tree.SelectedNode?.Text}) - идентификатор не известен...", Logging.INDEX_MESSAGE.NOT_SET);
        }

        /// <summary>
        /// Отобразить значение коэффициента для выбранного элемента в списке "Компоненты ТЭЦ"
        /// </summary>
        /// <param name="value">Значение для отображения</param>
        private void setNudnKoeffAlarmCurPowerValue(decimal value)
        {
            //Получить объект со значением коэффициента для выбранного элемента
            NumericUpDown ctrl = find(INDEX_CONTROL.NUD_KOEF) as NumericUpDown;
            //Отменить обработку события - изменение значения, т.к. изменяем значение программно
            ctrl.ValueChanged -= new EventHandler(NudnKoeffAlarmCurPower_ValueChanged);
            if (value > 0)
            {//Для реального компонента ТЭЦ
                ctrl.Minimum = 2M;
                ctrl.Maximum = 90M;
            }
            else
            {//Для виртуального компонента ТЭЦ "Все компоненты"
                ctrl.Minimum =
                ctrl.Maximum =
                    -1;
            }
            ctrl.Value = value;
            //Возобновить обработку события
            ctrl.ValueChanged += new EventHandler(NudnKoeffAlarmCurPower_ValueChanged);
        }

        /// <summary>
        /// Обработчик события - изменение значения коэффициента для компонента ТЭЦ
        /// </summary>
        /// <param name="obj">Объект, инициировавший событие</param>
        /// <param name="ev">Аргумент события</param>
        private void NudnKoeffAlarmCurPower_ValueChanged(object obj, EventArgs ev)
        {
            TECComponent comp;
            // для логгирования
            decimal dcPrevKoeffAlarmPcur;
            int err = -1;

            comp = (find(INDEX_CONTROL.TREEVIEW_TECCOMPONENT) as TreeViewTECComponent).CurrentTECComponent;
            if (Equals (comp, null) == false) {
                //Запомнить предыдущее значение
                dcPrevKoeffAlarmPcur = comp.m_dcKoeffAlarmPcur;
                //Установленное значение "времени выполнения"
                comp.m_dcKoeffAlarmPcur = (obj as NumericUpDown).Value;

                //Сохранить установленное значение в БД_конфигурации
                DbTSQLConfigDatabase.DbConfig ().ExecNonQuery (@"UPDATE [dbo].[GTP_LIST] SET [KoeffAlarmPcur] = " + comp.m_dcKoeffAlarmPcur + @" WHERE [ID] = " + comp.m_id, null, null, out err);

                Logging.Logg ().Action (@"PanelAlarm::NudnKoeffAlarmCurPower_ValueChanged () - пред.=" + dcPrevKoeffAlarmPcur + @", текущ.=" + comp.m_dcKoeffAlarmPcur + @" ..."
                    , Logging.INDEX_MESSAGE.NOT_SET);
            } else
                Logging.Logg ().Error ($@"PanekAlarm::NudnKoeffAlarmCurPower_ValueChanged (SelectedNode={(find(INDEX_CONTROL.TREEVIEW_TECCOMPONENT) as TreeView).SelectedNode?.Text}) - идентификатор не известен...", Logging.INDEX_MESSAGE.NOT_SET);
        }

        /// <summary>
        /// Найти дочерний элемент управления по идентификатору
        /// </summary>
        /// <param name="indx">Идентификатор элемента управления</param>
        /// <returns>Дочерний элемент управления</returns>
        private Control find (INDEX_CONTROL indx)
        {
            return findControl(indx.ToString());
        }

        /// <summary>
        /// Текущая (выбранная дата) в элементе управления 'MonthCalendar'
        /// </summary>
        private DateTime DateCurrent { get { return (find(INDEX_CONTROL.MCLDR_CURRENT) as MonthCalendar).SelectionStart.Date; } }
        
        /// <summary>
        /// Текущий (установленный) индекс часа начала периода в указанные сутки
        /// </summary>
        private int HourBegin { get { return (int)(find(INDEX_CONTROL.NUD_HOUR_BEGIN) as NumericUpDown).Value; } }
        
        /// <summary>
        /// Текущий (установленный) индекс часа окончания периода в указанные сутки
        /// </summary>
        private int HourEnd { get { return (int)(find(INDEX_CONTROL.NUD_HOUR_END) as NumericUpDown).Value; } }
        
        /// <summary>
        /// Обработчик события - нажатие на кнопку "Обновить"
        /// </summary>
        /// <param name="obj">Объект, инициировавший событие</param>
        /// <param name="ev">Аргумент события</param>
        private void btnRefresh_OnClick (object obj, EventArgs ev)
        {
            //Инициировать запрос К БД_значений со списком событий
            // за указанную дату
            // в период указанных часов
            delegateDatetimeChanged(new AdminAlarm.DatetimeCurrentEventArgs(DateCurrent, HourBegin, HourEnd));
        }

        #region Отчет MS Excel
        /// <summary>
        /// Обработчик события - нажатие на кнопку "Отчет"
        /// </summary>
        /// <param name="obj">Объект, инициировавший событие</param>
        /// <param name="ev">Аргумент события</param>
        private void btnReport_OnClick (object obj, EventArgs ev)
        {
            doReport ();
        }

        private void doReport ()
        {
        }
        #endregion

        private void onEventDateChanged(object obj, DateRangeEventArgs ev)
        {
            delegateDatetimeChanged(new AdminAlarm.DatetimeCurrentEventArgs(DateCurrent, HourBegin, HourEnd));
            ((DataGridViewAlarmJournal.Environment)(find (INDEX_CONTROL.DGV_EVENTS) as DataGridView).Tag).Stamp = DateCurrent;
            //(find (INDEX_CONTROL.DGV_EVENTS) as DataGridView).Rows.Clear ();
            (find(INDEX_CONTROL.DGV_DETAIL) as DataGridView).Rows.Clear();
        }

        /// <summary>
        /// Применить изменения графического оформления
        /// </summary>
        /// <param name="type">Тип изменений графического оформления</param>
        public override void UpdateGraphicsCurrent (int type)
        {
            //??? ничего не делать
        }

        public override Color BackColor
        {
            get
            {
                return base.BackColor;
            }

            set
            {
                base.BackColor = value;

                Control clbTECComponent;

                clbTECComponent = (find(INDEX_CONTROL.TREEVIEW_TECCOMPONENT) as TreeViewTECComponent);

                if (Equals (clbTECComponent, null) == false)
                    clbTECComponent.BackColor = BackColor;
                else
                    ;
            }
        }

        /// <summary>
        /// Тип фильтра(ограничений)
        /// </summary>
        public enum INDEX_FILTER : uint {
            /// <summary>
            /// Ограничения не устновлены
            /// </summary>
            NOT
            /// <summary>
            /// Ограничения по метке даты/времени регистрации события
            /// </summary>
            , DATETIME_REGISTRED
            /// <summary>
            /// Ограничения по идентификатору компоненту ТЭЦ
            /// </summary>
            , KEY_DEVICE

            , TYPE_ALARM
                , ALL }
        
        /// <summary>
        /// Класс для описания фильтра(ограничений) выбранных компонентов ТЭЦ
        /// </summary>
        private class Filter
        {
            private HMark m_mark;

            public DateTime? m_selDate;
            public List<FormChangeMode.KeyDevice> m_listIdCheckedIndices;
            public TYPE_ALARM Alarmed;

            public Filter()
            {
                m_mark = new HMark(0);

                m_selDate = null;
                m_listIdCheckedIndices = new List<FormChangeMode.KeyDevice>();
            }

            /// <summary>
            /// Установить фильтр для отображаемых значений
            /// </summary>
            /// <param name="indxFilter">Тип фильтра</param>
            /// <param name="objFilter">Значения для фильтра указанного типа</param>
            public void SetValue(INDEX_FILTER indxFilter, object objFilter)
            {
                if (m_mark.IsMarked ((int)indxFilter) == false)
                    m_mark.Marked ((int)indxFilter);
                else
                //??? повторная установка значения
                    ;

                switch (indxFilter)
                {
                    case INDEX_FILTER.KEY_DEVICE:
                        m_listIdCheckedIndices = objFilter as List<FormChangeMode.KeyDevice>;
                        break;
                    case INDEX_FILTER.TYPE_ALARM:
                        Alarmed = (TYPE_ALARM)objFilter;
                        break;
                    default:
                        Logging.Logg ().Warning ($@"PanelAlarm.DataGridViewBase::SetFilter (INDEX={indxFilter}) - не обрабатывается...", Logging.INDEX_MESSAGE.NOT_SET);
                        break;
                }
            }

            public bool IsVisibled(SAlarm.Service.AdminAlarm.ViewAlarmBase vaj)
            {
                bool bRes = false;
                int id_comp = -1;
                FormChangeMode.KeyDevice key;

                key = new FormChangeMode.KeyDevice (vaj.m_id_component);

                if (Equals (key, FormChangeMode.KeyDevice.Empty) == false)
                    foreach (INDEX_FILTER indx in Enum.GetValues (typeof (INDEX_FILTER)).Cast<INDEX_FILTER> ()) {
                        if (m_mark.IsMarked ((int)indx) == false)
                            continue;
                        else
                            ;

                        switch (indx) {
                            case INDEX_FILTER.KEY_DEVICE:
                                if (Equals (m_listIdCheckedIndices, null) == false)
                                    bRes = m_listIdCheckedIndices.Contains (key);
                                else
                                    ;
                                break;
                            case INDEX_FILTER.TYPE_ALARM:
                                if (typeof (AdminAlarm.ViewAlarmJournal).IsAssignableFrom (vaj.GetType ()) == true)
                                    bRes = Alarmed.HasFlag ((vaj as AdminAlarm.ViewAlarmJournal).m_type);
                                else
                                    ;
                                break;
                            default:
                                //Logging.Logg ().Warning ($@"PanelAlarm.Filter::IsVisibled () -значения фильтра={indx} не обрабатываются...", Logging.INDEX_MESSAGE.NOT_SET);
                                break;
                        }

                        if (bRes == false)
                            break;
                        else
                            ;
                    }
                else
                    ;

                return bRes;
            }
        }

        private abstract class DataGridViewAlarmBase : DataGridView
        {
            ///// <summary>
            ///// Делегат обновления значений в таблице
            ///// </summary>
            //protected DelegateObjectFunc delegateOnGetData;
            /// <summary>
            /// Объект фильтра отображаемых записей
            /// </summary>
            protected Filter m_filter;

            protected static string s_DateTimeFormat = @"HH:mm.ss.fff";
            
            /// <summary>
            /// Конструктор - основной (без параметров)
            /// </summary>
            public DataGridViewAlarmBase()
                : base()
            {
                InitializeComponent();
                ////Создать делегат передачи в текущий поток кода по обновлению значений в таблице
                //delegateOnGetData = new DelegateObjectFunc (onEvtGetData);

                m_filter = new Filter ();
            }
            
            /// <summary>
            /// Установить параметры визуализации
            /// </summary>
            protected virtual void InitializeComponent()
            {
                this.Dock = DockStyle.Fill;

                //Установить режим отображения загловков в столбцах
                this.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;

                this.AllowUserToAddRows = false; //Запретить пользователю добавлять строки
                this.AllowUserToDeleteRows = false; //Запретить пользователю удалять строки
                this.AllowUserToResizeRows = false; //Запретить пользователю изменять высоту строки
                this.MultiSelect = false;
                this.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
                this.RowHeadersVisible = false; //Отменить отображение заголовков для строк
                this.ReadOnly = true; //Установить режим - 'только чтение'

                //ForeColor = HDataGridViewTables.s_dgvCellStyles [(int)HDataGridViewTables.INDEX_CELL_STYLE.COMMON].ForeColor;
                //BackColor = HDataGridViewTables.s_dgvCellStyles[(int)HDataGridViewTables.INDEX_CELL_STYLE.COMMON].BackColor;
            }

            /// <summary>
            /// !!! Копия в 'PanelGrasp::TreeViewGrasp'
            /// Обработчик события "Получение данных для отображения"
            /// </summary>
            /// <param name="listRes">Объект - таблица с данными для отображения</param>
            public void OnEventListEventDate (IEnumerable<Tuple <FormChangeMode.KeyDevice, AdminAlarm.ViewAlarmBase>> listRes)
            {
                //Перенести выполнение в текущий поток (для доступа к элементу управления)
                try
                {                
                    Invoke(new Action<IEnumerable<Tuple <FormChangeMode.KeyDevice, AdminAlarm.ViewAlarmBase>>> (onEventListEventDate), listRes);
                }
                catch (Exception e)
                {
                    Logging.Logg().Exception(e, @"DataGridViewAlarmBase::OnEventListEventDate () - Invoke (obj.Type=" + listRes.GetType().Name + @") ...", Logging.INDEX_MESSAGE.NOT_SET);
                }
            }
            
            /// <summary>
            /// Отобразить полученные данные
            /// </summary>
            /// <param name="listRes">Объект - таблица с данными для отображения</param>
            protected virtual void onEventListEventDate (IEnumerable<Tuple <FormChangeMode.KeyDevice, AdminAlarm.ViewAlarmBase>> listRes)
            {
                //Очистить содержимое таблицы
                Rows.Clear();
            }

            /// <summary>
            /// Обработчик события - применить фильтр для строк в таблице
            /// </summary>
            /// <param name="indxFilter">Параметр фильтра - тип</param>
            /// <param name="obj">Параметр фильтра - значения</param>
            public virtual void OnEventFilter (INDEX_FILTER indxFilter, object obj)
            {
                m_filter.SetValue (indxFilter, obj);
                //Проверить необходимость применения фильтра
                if (Rows.Count == 0)
                    // нет строк - ничего не делать
                    return ;
                else
                    ;
            }

            protected int getIndexOfIdRec(long id)
            {
                int iRes = -1;

                if (id > 0)
                    foreach (DataGridViewRow r in this.Rows)
                        if ((long)r.Tag == id) {
                            iRes = r.Index;
                            break;
                        } else
                            ;
                else
                    ;

                return iRes;
            }

            public override Color BackColor
            {
                get
                {
                    return base.BackColor;
                }

                set
                {
                    base.BackColor = value == SystemColors.Control ? SystemColors.Window : value; ;

                    for (int j = 0; j < ColumnCount; j++)
                        for (int i = 0; i < RowCount; i++) {
                            if (Columns [j].GetType ().Name.Contains ("button") == false)
                                Rows [i].Cells [j].Style.BackColor = BackColor;
                            else
                                ;
                        }
                }
            }
        }
        
        /// <summary>
        /// Класс с таблицей отображения списка событий сигнализаций
        /// </summary>
        private class DataGridViewAlarmJournal : DataGridViewAlarmBase
        {
            //public event DelegateFunc EventClearDetail;

            Dictionary <long, SAlarm.Service.AdminAlarm.ViewAlarmJournal>  m_dictView;
            /// <summary>
            /// Событие для инициирования процессса подтверждения события сигнализаций
            /// </summary>
            public event DelegateObjectFunc EventConfirmed
                , EventSelected;
            /// <summary>
            /// Событие фиксации зарегистрированного события (только в режиме 'SERVICE')
            /// </summary>
            public event DelegateObjectFunc EventFixed;
            /// <summary>
            /// Режим работы "родительской" панели
            /// </summary>
            private SAlarm.Service.AdminAlarm.MODE _mode { get { return (Parent.Parent as PanelAlarm).m_adminAlarm.Mode; } }
            /// <summary>
            /// Перечисление для индексов столбцов в таблице
            /// </summary>
            private enum iINDEX_COLUMN
            {
                /*ID_REC, ID_COMPONENT, SITUATION,*/
                TECCOMPONENT_NAMESHR, TYPE_ALARM, VALUE, DATETIME_REGISTRED, DATETIME_FIXED, DATETIME_CONFIRM,
                BTN_CONFIRM
                    , COUNT_INDEX_COLUMN
            }
            
            /// <summary>
            /// Конструктор - основной (без параметров)
            /// </summary>
            public DataGridViewAlarmJournal()
                : base()
            {
                m_dictView = new Dictionary<long, SAlarm.Service.AdminAlarm.ViewAlarmJournal> ();
            }
            
            /// <summary>
            /// Установить параметры визуализации
            /// </summary>
            protected override void InitializeComponent()
            {
                //Объект 'столбец' - для добавления в таблицу
                DataGridViewColumn column = null;
                ////Объект 'режим отображения заголовка столбца'
                //DataGridViewAutoSizeColumnMode autoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
                //Массив строк для заголовков столбцов
                string [] arHeaderText = { /*@"ИД_записи_неотображается",*/
                    @"Компонент", @"Тип сигнализации", @"Значение", @"Время регистрации", @"Время фиксации", @"Время подтверждения", @"Подтверждение" };
                //Добавить столбцы в таблицу
                for (int i = 0; i < (int)iINDEX_COLUMN.COUNT_INDEX_COLUMN; i++)
                {
                    switch ((iINDEX_COLUMN)i)
                    {
                        //case iINDEX_COLUMN.ID_REC:
                        ////case iINDEX_COLUMN.ID_COMPONENT:
                        ////case iINDEX_COLUMN.SITUATION:
                        case iINDEX_COLUMN.TECCOMPONENT_NAMESHR:
                        case iINDEX_COLUMN.TYPE_ALARM:
                        case iINDEX_COLUMN.VALUE:
                        case iINDEX_COLUMN.DATETIME_REGISTRED:
                        case iINDEX_COLUMN.DATETIME_FIXED:
                        case iINDEX_COLUMN.DATETIME_CONFIRM:
                            //Текстовое поле
                            column = new DataGridViewTextBoxColumn();
                            break;
                        case iINDEX_COLUMN.BTN_CONFIRM:
                            //Кнопка с возможностью изменения свойства 'Enabled'
                            column = new DataGridViewDisableButtonColumn();
                            break;
                        default:
                            break;
                    }                    
                    ////Значение идентификатора записи - не отображать
                    //switch ((iINDEX_COLUMN)i)
                    //{
                    //    case iINDEX_COLUMN.ID_REC:
                    //    //case iINDEX_COLUMN.ID_COMPONENT:
                    //    //case iINDEX_COLUMN.SITUATION:
                    //        column.Visible = false;
                    //        break;
                    //    default:
                    //        break;
                    //}
                    //Установить текст заголовка столбца
                    column.HeaderText = arHeaderText[i];
                    //Установить режим отображения значений в столбце
                    column.AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
                    //Добавить столбец
                    int indxCol = this.Columns.Add(column);
                }

                base.InitializeComponent();

                this.CellClick += new DataGridViewCellEventHandler(onCellClick);
                this.SelectionChanged += new EventHandler(onSelectionChanged);
            }

            public class Environment
            {
                public bool WorkChanged;

                public DateTime Stamp;
            }

            /// <summary>
            /// Возвратить признак доступности кнопки в столбце "Подтверждение"
            /// </summary>
            /// <param name="tag">Идентификатор записи</param>
            /// <returns>Признак доступности кнопки "Подтверждение"</returns>
            private bool isRecEnabled (long tag)
            {
                //Кнопка доступна, если: 
                return (Equals (m_dictView[tag].m_dt_fixed, null) == false) // 1) событие сигнализации "зафиксировано"
                    && (Equals (m_dictView[tag].m_dt_confirmed, null) == true) // 2) событие сигнализации ранее не "подтверждено"
                    && ((Environment)Tag).WorkChanged == true; // 3) режим оповещения активирован
            }
            
            /// <summary>
            /// Отобразить полученные данные
            /// </summary>
            /// <param name="listRes">Объект - таблица с данными для отображения</param>
            protected override void onEventListEventDate (IEnumerable<Tuple <FormChangeMode.KeyDevice, AdminAlarm.ViewAlarmBase>> listRes)
            {
                int indxRow = -1;
                long lPrevIdRecSelected = -1L;
                DataGridViewRow rowFirstVisible;
                IEnumerable<Tuple<FormChangeMode.KeyDevice, SAlarm.Service.AdminAlarm.ViewAlarmJournal>> listView;

                if (SelectedRows.Count > 0)
                    lPrevIdRecSelected = (long)Rows[SelectedRows[0].Index].Tag;
                else
                    ;
                this.SelectionChanged -= onSelectionChanged;
                //Очистить содержимое таблицы
                base.onEventListEventDate(listRes);
                m_dictView.Clear ();

                listView = from res in listRes select Tuple.Create (res.Item1, (AdminAlarm.ViewAlarmJournal)res.Item2);
                foreach (Tuple<FormChangeMode.KeyDevice, SAlarm.Service.AdminAlarm.ViewAlarmJournal> r in listView)
                {
                    m_dictView.Add(r.Item2.m_id, r.Item2);
                    indxRow = Rows.Add (new object[] {
                        /*r.m_id,*/
                        r.Item2.m_str_name_shr_component
                        , r.Item2.m_str_name_shr_type
                        , r.Item2.m_value
                        , HDateTime.ToMoscowTimeZone (r.Item2.m_dt_registred.GetValueOrDefault()).ToString (s_DateTimeFormat)
                        , (!(r.Item2.m_dt_fixed == null)) ? HDateTime.ToMoscowTimeZone (r.Item2.m_dt_fixed.GetValueOrDefault()).ToString (s_DateTimeFormat) : string.Empty
                        , (!(r.Item2.m_dt_confirmed == null)) ? HDateTime.ToMoscowTimeZone (r.Item2.m_dt_confirmed.GetValueOrDefault()).ToString (s_DateTimeFormat) : string.Empty
                    });
                    // запомнить идентификатор записи
                    Rows [indxRow].Tag = r.Item2.m_id;
                    //Запомнить тип сигнализации, чтобы не распознавать его затем по строке
                    Rows [indxRow].Cells[(int)iINDEX_COLUMN.TYPE_ALARM].Tag = r.Item2.m_type;
                    //Установить доступность кнопки "Подтвердить"
                    (Rows[indxRow].Cells[this.Columns.Count - 1] as DataGridViewDisableButtonCell).Enabled = isRecEnabled((long)this.Rows[indxRow].Tag);

                    Rows[indxRow].Visible = m_filter.IsVisibled (r.Item2);
                    Rows [indxRow].DefaultCellStyle.BackColor = BackColor;
                }

                Logging.Logg ().Debug ($@"DataGridViewAlarmJournal::onEventListEventDate (listView.Count={listView.Count ()}) - Rows.Visible=<{(from r in Rows.Cast<DataGridViewRow> () where r.Visible == true select r).Count ()}>..."
                    , Logging.INDEX_MESSAGE.NOT_SET);

                this.SelectionChanged += new EventHandler(onSelectionChanged);

                try {
                    indxRow = getIndexOfIdRec(lPrevIdRecSelected);
                    if (indxRow < 0)
                        if (Rows.Count > 0) {
                            rowFirstVisible = (from r in Rows.Cast<DataGridViewRow> () where r.Visible == true select r).FirstOrDefault ();
                            if (Equals (rowFirstVisible, null) == false)
                                indxRow = rowFirstVisible.Index;
                            else
                            // indxRow по-прежнему = -1
                                ;
                        } else
                            ;
                    else
                        ;

                    if (! (indxRow < 0))
                    {
                        if (indxRow == SelectedRows[0].Index)
                            onSelectionChanged (this, EventArgs.Empty);
                        else
                        {
                            CurrentCell = Rows[indxRow].Cells[1];
                            CurrentCell.Selected = true;
                        }
                    }
                    else
                        ;
                } catch (Exception e) {
                    Logging.Logg ().Exception (e, $@"PanelAlarm.DataGridViewAlarmJournal::onEventListEventDate () - ...", Logging.INDEX_MESSAGE.NOT_SET);
                }
            }
            
            /// <summary>
            /// Обработчик события - применить фильтр для строк в таблице
            /// </summary>
            /// <param name="indxFilter">Параметр фильтра - тип</param>
            /// <param name="obj">Параметр фильтра - значения</param>
            public override void OnEventFilter (INDEX_FILTER indxFilter, object obj)
            {
                base.OnEventFilter (indxFilter, obj);

                bool bChanged = false //Признак: кол-во строк с признаком "отображать" изменилось
                    , bVisibled = false; //Признак "отображать" для очередной строки
                int indxPrevRowSelected = -1 //Индекс предыдущей выделенной строки
                    , indxCurRowSelected = -1
                    , iCountRowsVisibled = 0 //Кол-во строк с признаком "отображать"
                    , i = -1;
                long lPrevIdRecSelected = -1L; //Идентификатор записи в БД для события, отображаемого в строке
                if (SelectedRows.Count > 0)
                {
                    indxPrevRowSelected = SelectedRows[0].Index;
                    lPrevIdRecSelected = (long)Rows[indxPrevRowSelected].Tag;
                }
                else
                    ;
                
                foreach (DataGridViewRow r in Rows)
                {
                    //Определить признак "отображать" для очередной строки
                    bVisibled = m_filter.IsVisibled (m_dictView[(long)r.Tag]);
                    //Установить признак: кол-во строк с признаком "отображать" изменилось
                    if ((bChanged == false)
                        && (! (r.Visible == bVisibled))
                    )
                        bChanged = true;
                    else
                        ;
                    //Установить признак отображать/не_отображать строке
                    r.Visible = bVisibled;
                    // подсчет кол-ва строк с признаком "отображать"
                    if (bVisibled == true)
                        iCountRowsVisibled ++;
                    else
                        ;
                }

                if (bChanged == true)
                    if (iCountRowsVisibled > 0)
                    {
                        if (!(indxPrevRowSelected < 0))
                            if (indxPrevRowSelected < iCountRowsVisibled)
                                indxCurRowSelected = indxPrevRowSelected;
                            else
                                indxCurRowSelected = iCountRowsVisibled - 1;
                        else
                            indxCurRowSelected = 0;

                        if (!(indxCurRowSelected < 0))
                        {
                            if (Rows[indxCurRowSelected].Visible == false)
                            {// поиск строки, имеющей признак "отображать"
                                indxCurRowSelected = findIndexRowToSelected (indxCurRowSelected);
                            }
                            else
                                ;

                            if (! (indxPrevRowSelected == indxCurRowSelected))
                            {
                                CurrentCell = Rows[indxCurRowSelected].Cells[1];
                                CurrentCell.Selected = true;
                            }
                            else
                                onSelectionChanged (this, EventArgs.Empty);
                        }
                        else
                            ;
                    }
                    else
                        ////??? очистить 'DataGridViewDetail'
                        //EventClearDetail ()
                        ;
                else
                    ; // нет изменений
            }
            
            /// <summary>
            /// Поиск индекса строки для указания ее в качестве выбранной
            ///  , единственный критерий - выбранная строка не может имет признак "не отображать"
            /// </summary>
            /// <param name="indxRowNotVisible">Индекс строки, получившей признак "не отображать"</param>
            /// <returns>Индекс строки (-1, если не найдена)</returns>
            private int findIndexRowToSelected (int indxRowNotVisible)
            {
                int iRes = -1
                    , i = -1;

                // вниз
                for (i = indxRowNotVisible + 1; i < Rows.Count; i++)
                    if (Rows[i].Visible == true)
                    {
                        iRes = i;
                        break;
                    }
                    else
                        ;

                if (iRes < 0)
                {// вверх
                    for (i = indxRowNotVisible - 1; !(i < 0); i--)
                        if (Rows[i].Visible == true)
                        {
                            iRes = i;
                            break;
                        }
                        else
                            ;
                }
                else
                    ;

                return iRes;
            }
            
            /// <summary>
            /// Метод для обновления значения (дата/время фиксации/подтверждения) одной записи
            /// </summary>
            /// <param name="pars">Аргумент- массив с идентификатором события, датой/временем фиксации/подтверждения</param>
            public void UpdateRec (object []pars)
            {
                int indxRow = getIndexOfIdRec((long)pars[1])
                    , indxCol = -1;
                DateTime stamp;
                
                if (!(indxRow < 0))
                {
                    switch ((AdminAlarm.StatesMachine)pars[0])
                    {
                        case AdminAlarm.StatesMachine.Fixed:
                            indxCol = (int)iINDEX_COLUMN.DATETIME_FIXED;
                            break;
                        case AdminAlarm.StatesMachine.Confirm:
                            indxCol = (int)iINDEX_COLUMN.DATETIME_CONFIRM;
                            break;
                        default:
                            break;
                    }

                    try {
                        stamp = HDateTime.ToMoscowTimeZone ((DateTime)pars[2]);
                        this.Rows[indxRow].Cells[indxCol].Value = stamp.ToString (s_DateTimeFormat);
                        this.Rows[indxRow].Cells[indxCol].Style = (((Environment)Tag).Stamp.Date - stamp.Date).TotalDays == 0
                            ? DefaultCellStyle
                                : HDataGridViewTables.s_dgvCellStyles[(int)HDataGridViewTables.INDEX_CELL_STYLE.WARNING];
                    } catch (Exception e) {
                        Logging.Logg ().Exception (e, $@"PanelAlarm.DataGridViewAlarmJournal::UpdateRec () - ...", Logging.INDEX_MESSAGE.NOT_SET);
                    }

                    //Установить доступность кнопки "Подтвердить"
                    (Rows[indxRow].Cells[this.Columns.Count - 1] as DataGridViewDisableButtonCell).Enabled = isRecEnabled ((long)Rows[indxRow].Tag);
                }
                else
                    Logging.Logg().Error(@"DataGridViewAlarmJournal::OnUpdate () - не нйдена строка для события с ID=" + (long)pars[1]
                        , Logging.INDEX_MESSAGE.NOT_SET);
            }
            
            /// <summary>
            /// Обработчик события нажатия кнопки в столбце "Подтверждение"
            /// </summary>
            /// <param name="obj">Объект, инициировавший событие</param>
            /// <param name="ev">Аргумент события</param>
            private void onCellClick (object obj, DataGridViewCellEventArgs ev)
            {
                long id = -1;
                TYPE_ALARM type = TYPE_ALARM.UNKNOWN;
                
                if ((ev.ColumnIndex == (int)iINDEX_COLUMN.BTN_CONFIRM)
                    && ((this.Rows[ev.RowIndex].Cells[ev.ColumnIndex] as DataGridViewDisableButtonCell).Enabled == true))
                {
                    id = (long)Rows [ev.RowIndex].Tag;
                    type = (TYPE_ALARM)Rows[ev.RowIndex].Cells[(int)iINDEX_COLUMN.TYPE_ALARM].Tag;
                    if (this.Rows[ev.RowIndex].Cells[(int)iINDEX_COLUMN.DATETIME_FIXED].Value.Equals(string.Empty) == true)
                    {
                        // очевидно, что событие не зафиксировано (только в режиме 'SERVICE')
                        EventFixed(new AlarmNotifyEventArgs(m_dictView[id].m_id_component
                            , type.Translate()
                            , new AlarmNotifyEventArgs.EventReason (m_dictView[id].m_value)
                            , m_dictView[id].m_dt_registred.GetValueOrDefault()
                            , m_dictView[id].m_situation));
                    }
                    else
                        // очевидно, что событие не подтверждено
                        EventConfirmed(new object [] { id, m_dictView[id].m_id_component, m_dictView[id].m_situation });
                }
                else
                    ; // остальные столбцы не требуют обработки
            }
            
            /// <summary>
            /// Обработчик события изменения выбора строки в таблице
            /// </summary>
            /// <param name="obj">Объект, инициировавший событие (??? this)</param>
            /// <param name="ev">Аргумент события</param>
            private void onSelectionChanged(object obj, EventArgs ev)
            {
                if (this.SelectedRows.Count > 0)
                    EventSelected((long)Rows [this.SelectedRows[0].Index].Tag as object);
                else
                    ;
            }

            //protected override void onSorted(object obj, EventArgs e)
            //{
            //    iINDEX_COLUMN indx = (iINDEX_COLUMN)SortedColumn.Index;

            //    switch (indx)
            //    {
            //        case iINDEX_COLUMN.TECCOMPONENT_NAMESHR:
            //            m_listView.Sort(delegate(ViewAlarmBase item1, ViewAlarmBase item2) { return item1.m_id_component.CompareTo(item2.m_id_component); });
            //            break;
            //        case iINDEX_COLUMN.VALUE:
            //            m_listView.Sort(delegate(ViewAlarmBase item1, ViewAlarmBase item2) { return item1.m_value.CompareTo(item2.m_value); });
            //            break;
            //        case iINDEX_COLUMN.DATETIME_REGISTRED:
            //            m_listView.Sort(
            //                delegate(ViewAlarmBase item1, ViewAlarmBase item2)
            //                {
            //                    return (item1 as ViewAlarmJournal).m_dt_registred.GetValueOrDefault().CompareTo((item2 as ViewAlarmJournal).m_dt_registred);
            //                }
            //            );
            //            break;
            //        default:
            //            break;
            //    }
            //}
        }

        /// <summary>
        /// Класс для описания таблицы представления списка событий сигнализаций
        /// </summary>
        private class DataGridViewAlarmDetail : DataGridViewAlarmBase
        {
            Dictionary <long, SAlarm.Service.AdminAlarm.ViewAlarmDetail> m_dictView;
            /// <summary>
            /// Перечисление для индексов столбцов в таблице
            /// </summary>
            private enum iINDEX_COLUMN
            {
                /*ID_REC, */TECCOMPONENT_NAMESHR, VALUE, LAST_CHANGED_AT
                    , COUNT_INDEX_COLUMN
            }
            /// <summary>
            /// Конструктор - основной (без параметров)
            /// </summary>
            public DataGridViewAlarmDetail()
                : base()
            {
                m_dictView = new Dictionary<long, SAlarm.Service.AdminAlarm.ViewAlarmDetail> ();
            }
            /// <summary>
            /// Установить параметры визуализации
            /// </summary>
            protected override void InitializeComponent()
            {
                //Объект 'столбец' - для добавления в таблицу
                DataGridViewColumn column = null;
                //Массив строк для заголовков столбцов
                string[] arHeaderText = { /*@"ИД_записи_неотображается",*/
                    @"Компонент", @"Значение", @"Время значения" };
                //Добавить столбцы в таблицу
                for (int i = 0; i < (int)iINDEX_COLUMN.COUNT_INDEX_COLUMN; i++)
                {
                    switch ((iINDEX_COLUMN)i)
                    {
                        //case iINDEX_COLUMN.ID_REC:
                        case iINDEX_COLUMN.TECCOMPONENT_NAMESHR:
                        case iINDEX_COLUMN.VALUE:
                        case iINDEX_COLUMN.LAST_CHANGED_AT:
                            //Текстовое поле
                            column = new DataGridViewTextBoxColumn();
                            break;
                        default:
                            break;
                    }
                    ////Значение идентификатора записи - не отображать
                    //switch ((iINDEX_COLUMN)i)
                    //{
                    //    case iINDEX_COLUMN.ID_REC:
                    //        column.Visible = false;
                    //        break;
                    //    default:
                    //        break;
                    //}
                    //Установить текст заголовка столбца
                    column.HeaderText = arHeaderText[i];
                    //Установить режим отображения значений в столбце
                    column.AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
                    //Добавить столбец
                    this.Columns.Add(column);
                }

                base.InitializeComponent();
            }

            protected override void onEventListEventDate(IEnumerable<Tuple <FormChangeMode.KeyDevice, AdminAlarm.ViewAlarmBase>> listRes)
            {
                int indxRow = -1;
                long lPrevIdRecSelected = -1L;
                IEnumerable<Tuple <FormChangeMode.KeyDevice, SAlarm.Service.AdminAlarm.ViewAlarmDetail>> listView;

                if (SelectedRows.Count > 0)
                    lPrevIdRecSelected = (long)Rows[SelectedRows[0].Index].Tag;
                else
                    ;
                //Очистить содержимое таблицы
                base.onEventListEventDate(listRes);
                m_dictView.Clear ();

                listView = from res in listRes select Tuple.Create (res.Item1, (AdminAlarm.ViewAlarmDetail)res.Item2);
                foreach (Tuple <FormChangeMode.KeyDevice, SAlarm.Service.AdminAlarm.ViewAlarmDetail> r in listView)
                {
                    m_dictView.Add (r.Item2.m_id, r.Item2);
                    indxRow = Rows.Add(new object[] {
                        r.Item2.m_id
                        , r.Item2.m_str_name_shr_component
                        , r.Item2.m_value
                        , r.Item2.m_last_changed_at.GetValueOrDefault().ToString (s_DateTimeFormat)
                    });

                    Rows [indxRow].Tag = r.Item2.m_id;
                    Rows [indxRow].Visible = m_filter.IsVisibled (r.Item2);
                    Rows [indxRow].DefaultCellStyle.BackColor = BackColor;
                }

                indxRow = getIndexOfIdRec (lPrevIdRecSelected);
                if (! (indxRow < 0))
                {
                    CurrentCell = Rows[indxRow].Cells[1];
                    CurrentCell.Selected = true;
                }    
                else
                    ;
            }

            /// <summary>
            /// Обработчик события - применить фильтр для строк в таблице
            /// </summary>
            /// <param name="indxFilter">Параметр фильтра - тип</param>
            /// <param name="obj">Параметр фильтра - значения</param>
            public override void OnEventFilter (INDEX_FILTER indxFilter, object obj)
            {
                base.OnEventFilter (indxFilter, obj);

                foreach (DataGridViewRow r in Rows)
                    r.Visible = m_filter.IsVisibled (m_dictView[(long)Rows [SelectedRows [0].Index].Tag]);
            }

            public void OnEventClear ()
            {
                Rows.Clear ();
            }
        }

        private delegate void DelegateIndexFilterObjectFunc (INDEX_FILTER indxFilter, object obj);

        private interface IControlFilter
        {
            event DelegateIndexFilterObjectFunc EventFilter;

            void PerformEventFilter (PanelAlarm.INDEX_FILTER indxFilter, object obj);
        }

        private class TreeViewTECComponent : TreeView, IControlFilter
        {
            private TreeNode _root;

            public event DelegateIndexFilterObjectFunc EventFilter;

            public void PerformEventFilter (INDEX_FILTER indxFilter, object obj)
            {
                EventFilter?.Invoke (indxFilter, obj);
            }

            private enum LEVEL { UNKNOWN, ROOT, AREA, TEC, GTP, TG }

            public TreeViewTECComponent (Color foreColor, Color backgroundColor)
                : base ()
            {
                BackColor = backgroundColor;
                ForeColor = foreColor;

                InitializeComponent ();
            }

            public TECComponent CurrentTECComponent
            {
                get
                {
                    return typeof(TECComponent).IsAssignableFrom (SelectedNode.Tag.GetType ()) == true
                        ? (TECComponent)SelectedNode.Tag
                            : null;
                }
            }

            private void InitializeComponent ()
            {
                //Dock = DockStyle.Fill;
                //??? SelectionMode.One;
                ShowRootLines = true;
                CheckBoxes = true;

                AfterCheck += onAfterCheck;

                _root = Nodes.Add ("Все компоненты");
                _root.Tag = 0;
                _root.Checked = true;

                _root.Expand ();
            }

            /// <summary>
            /// Уровень текущего(выбранного) элемента в иерархии древовидного списка
            /// </summary>
            private LEVEL SelectedLevel
            {
                get
                {
                    return getLevel (SelectedNode);
                }
            }

            public void SelectRoot ()
            {
                if (Nodes.Count > 0)
                    SelectedNode = Nodes[0];
                else
                    ;
            }

            /// <summary>
            /// Возвратить уровень элемента в иерархии древовидного списка
            /// </summary>
            /// <param name="node">Элемент для которого определяется уровень</param>
            /// <returns>Уровень элемента</returns>
            private static LEVEL getLevel (TreeNode node)
            {
                LEVEL levRes = LEVEL.UNKNOWN;

                if (Equals (node, null) == false)
                    if (typeof (int).IsAssignableFrom (node.Tag.GetType ()) == true)
                        levRes = LEVEL.ROOT;
                    else if (typeof (Area).IsAssignableFrom (node.Tag.GetType ()) == true)
                        levRes = LEVEL.AREA;
                    else if (typeof (TEC).IsAssignableFrom (node.Tag.GetType ()) == true)
                        levRes = LEVEL.TEC;
                    else if (typeof (TECComponent).IsAssignableFrom (node.Tag.GetType ()) == true)
                        levRes = LEVEL.GTP;
                    else if (typeof (TECComponentBase).IsAssignableFrom (node.Tag.GetType ()) == true)
                        levRes = LEVEL.TG;
                    else
                        ;
                else
                    ;

                return levRes;
            }

            /// <summary>
            /// Обработчик события изменение значения признак элемента древовидного списка
            /// </summary>
            /// <param name="sender">Объект, инициировавший событие - TreeView</param>
            /// <param name="e">Аргумент события (содержит ссылку на элемент древовидного списка)</param>
            private void onAfterCheck (object sender, TreeViewEventArgs e)
            {
                TreeNode node;
                LEVEL level;

                node = e.Node;
                level = SelectedLevel;

                if (SelectedLevel < LEVEL.TG) {
                    (from n in node.Nodes.All () select n)
                        .ToList ().ForEach (n => {
                            n.Checked = node.Checked;
                        });
                } else
                    ;

                EventFilter?.Invoke (INDEX_FILTER.KEY_DEVICE, KeyDeviceCheckedIndices);
            }

            /// <summary>
            /// Добавить элемент древовидного списка для филиала (без дочерних элементов)
            /// </summary>
            /// <param name="area">Филиал</param>
            /// <param name="bExpand">Признак необходимости отображения дочрних элементов</param>
            /// <returns>Элемент древовидного списка для филиала</returns>
            public TreeNode AddArea (Area area, bool bExpand = true)
            {
                TreeNode nodeRes;

                nodeRes = _root.Nodes.Add (area.name_shr);
                nodeRes.Tag = area;
                nodeRes.Checked = _root.Checked;

                if (bExpand == true)
                    nodeRes.Expand ();
                else
                    ;

                return nodeRes;
            }

            /// <summary>
            /// Добавить элемент древовидного списка для ТЭЦ (с дочерними элементами)
            /// </summary>
            /// <param name="tec">ТЭЦ для добавления</param>
            /// <param name="bExpand">Признак необходимости отображения дочрних элементов</param>
            public void AddTEC (TEC tec, bool bExpand = true)
            {
                TreeNode nodeArea
                    , nodeTEC;

                if (Equals (_root.Nodes, null) == false) {
                    nodeArea = (from node in _root.Nodes.Cast<TreeNode> () where ((Area)node.Tag).m_id == tec.Area.m_id select node).FirstOrDefault ();
                    if (Equals (nodeArea, null) == true)
                        nodeArea = AddArea (tec.Area);
                    else
                        ;
                } else
                    nodeArea = AddArea (tec.Area);

                nodeTEC = nodeArea.Nodes.Add (tec.name_shr);
                nodeTEC.Tag = tec;
                nodeTEC.Checked = nodeArea.Checked;

                entryNodeTEC (nodeTEC);

                if (bExpand == true)
                    nodeTEC.Expand ();
                else
                    ;
            }

            /// <summary>
            /// Добавить элементы древовидного списка для перечня филиалов (без дочерних элементов)
            /// </summary>
            /// <param name="areas">Перечень филиалов для добавления</param>
            public void AddRangeArea (IEnumerable<Area> areas)
            {
                areas.ToList ().ForEach (a => AddArea (a));
            }

            /// <summary>
            /// Добавить элементы древовидного списка для перечня ТЭЦ
            /// </summary>
            /// <param name="listTec">Перечень ТЭЦ для добавления</param>
            public void AddRangeTEC (IEnumerable<TEC> listTec)
            {
                listTec.ToList ().ForEach (t => AddTEC (t));
            }

            /// <summary>
            /// Добавить все дочерние элементы для ТЭЦ
            /// </summary>
            /// <param name="node">Узловой элемент для ТЭЦ</param>
            private void entryNodeTEC (TreeNode node)
            {
                TreeNode nodeChild;

                (from tc in ((TEC)node.Tag).ListTECComponents where tc.IsGTP == true select tc)
                    .ToList ().ForEach (gtp => {
                        nodeChild = node.Nodes.Add (gtp.name_shr);
                        nodeChild.Tag = gtp;
                        nodeChild.Checked = node.Checked;

                        entryNodeGTP (nodeChild);
                    });
            }

            /// <summary>
            /// Добавить все дочерние элементы для ГТП
            /// </summary>
            /// <param name="node">Узловой элемент для ГТП</param>
            private void entryNodeGTP (TreeNode node)
            {
                TreeNode nodeChild;

                (from tc in ((TECComponent)node.Tag).ListLowPointDev select tc)
                    .ToList ().ForEach (tg => {
                        nodeChild = node.Nodes.Add (tg.name_shr);
                        nodeChild.Tag = tg;
                        nodeChild.Checked = node.Checked;
                    });
            }

            /// <summary>
            /// Перечень ключей оборудования для отображения
            ///  , в ~ от указанных признаков в текущем элементе управления
            /// </summary>
            public List<FormChangeMode.KeyDevice> KeyDeviceCheckedIndices
            {
                get
                {
                    List<FormChangeMode.KeyDevice> listRes;

                    listRes = (from n in _root.Nodes.All ()
                        where (n.Checked == true)
                            && (getLevel (n) > LEVEL.TEC)
                            select new FormChangeMode.KeyDevice () {
                                Mode = getLevel (n) == LEVEL.GTP ? FormChangeMode.MODE_TECCOMPONENT.GTP
                                    : getLevel (n) == LEVEL.TG ? FormChangeMode.MODE_TECCOMPONENT.TG
                                        : FormChangeMode.MODE_TECCOMPONENT.Unknown
                                , Id = ((TECComponentBase)n.Tag).m_id
                            })
                        .Where (key => {
                            return !(key.Mode == FormChangeMode.MODE_TECCOMPONENT.Unknown); })
                        .ToList ();

                    return listRes;
                }
            }
        }
    }

    partial class PanelAlarm
    {
        /// <summary>
        /// Перечисление идентификаторов дочерних элементов управления
        /// </summary>
        private enum INDEX_CONTROL { UNKNOWN = -1
            , MCLDR_CURRENT, NUD_HOUR_BEGIN, NUD_HOUR_END
            , BTN_REFRESH
            , TREEVIEW_TECCOMPONENT, NUD_KOEF
            , CBX_WORK
            , CLB_TYPEALARM
            , BTN_REPORT
            , DGV_EVENTS, DGV_DETAIL };

        /// <summary>
        /// Требуется переменная конструктора.
        /// </summary>
        private System.ComponentModel.IContainer components = null;
        /// <summary> 
        /// Освободить все используемые ресурсы.
        /// </summary>
        /// <param name="disposing">истинно, если управляемый ресурс должен быть удален; иначе ложно.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Код реализации интерфейса 'IDataHost'
        /// <summary>
        /// Событие запроса данных для плюг'ина из главной формы
        /// </summary>
        public event DelegateObjectFunc EvtDataAskedHost;
        /// <summary>
        /// Отиравить запрос на получение данных
        /// </summary>
        /// <param name="par">Аргумент с детализацией запрашиваемых данных</param>
        public void DataAskedHost(object par)
        {
            //??? почему так много вложенных массивов...
            //m_viewAlarm.Push(this, new object[] { new object[] { par } });
            //EvtDataAskedHost.BeginInvoke(new EventArgsDataHost(-1, new object[] { par }), new AsyncCallback(this.dataRecievedHost), new Random());
            EvtDataAskedHost(new EventArgsDataHost(this, par as object[]));
        }
        /// <summary>
        /// Обработчик события ответа от главной формы
        /// </summary>
        /// <param name="res">Объект класса 'EventArgsDataHost' с идентификатором/данными из главной формы</param>
        public void OnEvtDataRecievedHost(object res)
        {
            EventArgsDataHost ev = res as EventArgsDataHost;
            AdminAlarm.StatesMachine stateMachine = (AdminAlarm.StatesMachine)(ev.par as object[])[0];

            switch (stateMachine)
            {
                case AdminAlarm.StatesMachine.Detail:
                    //??? Прямой вызов метода-обработчика
                    (find(INDEX_CONTROL.DGV_EVENTS) as DataGridViewAlarmDetail).OnEventListEventDate((IEnumerable<Tuple <FormChangeMode.KeyDevice, AdminAlarm.ViewAlarmBase>>)(ev.par as object[])[1]);
                    break;
                case AdminAlarm.StatesMachine.Fixed:
                case AdminAlarm.StatesMachine.Confirm:
                    (find(INDEX_CONTROL.DGV_EVENTS) as DataGridViewAlarmJournal).UpdateRec(ev.par);
                    break;
                default:
                    break;
            }
        }
        #endregion Код реализации интерфейса 'IDataHost'

        #region Код, автоматически созданный конструктором компонентов

        private class PanelView : ASUTP.Control.HPanelCommon {
            public PanelView () : base (1, 8)
            {
                initializeLayoutStyleEvenly ();
            }
            
            protected override void initializeLayoutStyle(int cols = -1, int rows = -1)
            {
                throw new NotImplementedException();
            }
        }
        /// <summary>
        /// Обязательный метод для поддержки конструктора - не изменяйте
        /// содержимое данного метода при помощи редактора кода.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();
            //this.CellBorderStyle = TableLayoutPanelCellBorderStyle.Single;

            _widthPanelManagement += 2 * Margin.Horizontal;

            Control ctrl = null // объект управления
                , ctrlRel = null; // объект управления, относительно которого размещается текущий объект
            INDEX_CONTROL indxCurrent = INDEX_CONTROL.UNKNOWN;
            int posX = -1 // позиция по горизонтали для элемента управления
                , posY = -1 // позиция по вертикали для элемента управления
                , cols = -1 // кол-во столбцов на панели с активными элементами управления
                , widthRel = -1; //ширина относительная столбца на панели с активными элементами управления
            //Установить кол-во контэйнеров-столбцов, контэйнеров-строк
            initializeLayoutStyle (2, 1);
            //Приостановить формирование макета элементов управления
            this.SuspendLayout();

            Panel panelManagement = new Panel();
            panelManagement.Dock = DockStyle.Fill;
            this.Controls.Add(panelManagement, 0, 0);

            posX = Margin.Horizontal;
            posY = Margin.Vertical;
            cols = 4;
            widthRel = (_widthPanelManagement - 2 * Margin.Horizontal) / 4;
            
            indxCurrent = INDEX_CONTROL.MCLDR_CURRENT;
            ctrl = new System.Windows.Forms.MonthCalendar();
            ctrl.Tag = indxCurrent;
            ctrl.Name = indxCurrent.ToString();
            ctrl.Location = new System.Drawing.Point(posX, posY);
            ctrl.Anchor = (AnchorStyles)((AnchorStyles.Left | AnchorStyles.Top) | AnchorStyles.Right);
            (ctrl as MonthCalendar).MaxSelectionCount = 1;
            //(ctrl as MonthCalendar).ShowToday = false;
            //(ctrl as MonthCalendar).ShowTodayCircle = false;
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.UNKNOWN;
            ctrl = new Label();
            ctrl.Location = new System.Drawing.Point (posX, posY += 172);
            ctrl.Size = new System.Drawing.Size(widthRel / 2, ctrl.Height);
            ctrl.Text = @"c";
            (ctrl as Label).TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.NUD_HOUR_BEGIN;
            ctrl = new NumericUpDown();
            ctrl.Tag = indxCurrent;
            ctrl.Name = indxCurrent.ToString();
            ctrl.Location = new System.Drawing.Point(posX += widthRel / 2, posY);
            ctrl.Size = new System.Drawing.Size(widthRel + widthRel / 2, ctrl.Height);
            (ctrl as NumericUpDown).Minimum = 0;
            (ctrl as NumericUpDown).Maximum = 23;
            (ctrl as NumericUpDown).Enabled = false;
            (ctrl as NumericUpDown).ReadOnly = true;
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.UNKNOWN;
            ctrl = new Label();
            ctrl.Location = new System.Drawing.Point(posX += widthRel + widthRel / 2, posY);
            ctrl.Size = new System.Drawing.Size(widthRel / 2, ctrl.Height);
            ctrl.Text = @"до";
            (ctrl as Label).TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.NUD_HOUR_END;
            ctrl = new NumericUpDown();
            ctrl.Tag = indxCurrent;
            ctrl.Name = indxCurrent.ToString();
            ctrl.Location = new System.Drawing.Point(posX += widthRel / 2, posY);
            ctrl.Size = new System.Drawing.Size(widthRel + widthRel / 2, ctrl.Height);
            (ctrl as NumericUpDown).Minimum = 1;
            (ctrl as NumericUpDown).Maximum = 24;
            (ctrl as NumericUpDown).Value = 24;
            (ctrl as NumericUpDown).Enabled = false;
            (ctrl as NumericUpDown).ReadOnly = true;
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.BTN_REFRESH;
            ctrlRel = find(INDEX_CONTROL.NUD_HOUR_END);
            ctrl = new Button();
            ctrl.Tag = indxCurrent;
            ctrl.Name = indxCurrent.ToString();
            ctrl.Location = new System.Drawing.Point(0, posY = ctrlRel.Location.Y + ctrlRel.Height + Margin.Vertical);
            ctrl.Size = new System.Drawing.Size(_widthPanelManagement - Margin.Horizontal, ctrl.Height);
            ctrl.Text = @"Обновить";
            (ctrl as Button).Click += new EventHandler(btnRefresh_OnClick);
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.TREEVIEW_TECCOMPONENT;
            ctrlRel = find(INDEX_CONTROL.BTN_REFRESH);
            ctrl = new TreeViewTECComponent (ForeColor, BackColor == SystemColors.Control ? SystemColors.Window : BackColor);
            ctrl.Tag = indxCurrent;
            ctrl.Name = indxCurrent.ToString();
            ctrl.Location = new System.Drawing.Point(0, posY = ctrlRel.Location.Y + ctrlRel.Height + Margin.Vertical);
            ctrl.Size = new System.Drawing.Size(_widthPanelManagement - Margin.Horizontal, _widthPanelManagement / 1);
            (ctrl as TreeViewTECComponent).AfterSelect += fTECComponent_OnSelectedIndexChanged;
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.UNKNOWN;
            ctrlRel = find(INDEX_CONTROL.TREEVIEW_TECCOMPONENT);
            ctrl = new Label();
            ctrl.Location = new System.Drawing.Point(posX = Margin.Horizontal, posY = ctrlRel.Location.Y + ctrlRel.Height);
            ctrl.Size = new System.Drawing.Size(5 * widthRel / 2, ctrl.Height);
            ctrl.Text = @"Коэффициент";
            (ctrl as Label).TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.NUD_KOEF;
            ctrl = new NumericUpDown();
            ctrl.Tag = indxCurrent;
            ctrl.Name = indxCurrent.ToString();
            ctrl.Location = new System.Drawing.Point(posX += 5 * widthRel / 2, posY);
            ctrl.Size = new System.Drawing.Size(widthRel + widthRel / 2, ctrl.Height);
            (ctrl as NumericUpDown).Enabled = false;
            (ctrl as NumericUpDown).ReadOnly = true;
            (ctrl as NumericUpDown).TextAlign = HorizontalAlignment.Right;
            (ctrl as NumericUpDown).Increment = 2M;
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.CBX_WORK;
            ctrlRel = find(INDEX_CONTROL.NUD_KOEF);
            ctrl = new CheckBox();
            ctrl.Tag = indxCurrent;
            ctrl.Name = indxCurrent.ToString();
            ctrl.Location = new System.Drawing.Point(posX = Margin.Horizontal, posY = ctrlRel.Location.Y + ctrlRel.Height + Margin.Vertical);
            ctrl.Text = @"Включено";
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.CLB_TYPEALARM;
            ctrlRel = find(INDEX_CONTROL.CBX_WORK);
            ctrl = new CheckedListBoxTypeAlarm();
            ctrl.Tag = indxCurrent;
            ctrl.Name = indxCurrent.ToString();
            ctrl.Location = new System.Drawing.Point(0, posY = ctrlRel.Location.Y + ctrlRel.Height + Margin.Vertical);
            ctrl.Size = new System.Drawing.Size (_widthPanelManagement - Margin.Horizontal, 10 * _widthPanelManagement / 9);
            panelManagement.Controls.Add(ctrl);

            indxCurrent = INDEX_CONTROL.BTN_REPORT;
            ctrlRel = find(INDEX_CONTROL.CLB_TYPEALARM);
            ctrl = new Button();
            ctrl.Tag = indxCurrent;
            ctrl.Name = indxCurrent.ToString();
            ctrl.Location = new System.Drawing.Point(0, posY = ctrlRel.Location.Y + ctrlRel.Height + Margin.Vertical / 3);
            ctrl.Size = new System.Drawing.Size(_widthPanelManagement - Margin.Horizontal, ctrl.Height);
            ctrl.Text = @"Отчет";
            (ctrl as Button).Click += new EventHandler(btnReport_OnClick);
            panelManagement.Controls.Add(ctrl);

            // панель-контейнер для панелей с событиями
            PanelView panelView = new PanelView();
            ctrl = new DataGridViewAlarmJournal();
            ctrl.Name = INDEX_CONTROL.DGV_EVENTS.ToString();
            panelView.Controls.Add(ctrl, 0, 0); panelView.SetColumnSpan(ctrl, 1); panelView.SetRowSpan(ctrl, 7);
            ctrl = new DataGridViewAlarmDetail();
            ctrl.Name = INDEX_CONTROL.DGV_DETAIL.ToString();
            panelView.Controls.Add(ctrl, 0, 7); panelView.SetColumnSpan(ctrl, 1); panelView.SetRowSpan(ctrl, 1);
            this.Controls.Add(panelView, 1, 0);

            this.ResumeLayout(false);
            this.PerformLayout();

            this.Disposed += new EventHandler(onDisposed);
        }

        #endregion
    }

    public static class TreeViewNodeExtensions
    {
        public static IEnumerable<TreeNode>All (this TreeNodeCollection nodes)
        {
            foreach (TreeNode n in nodes) {
                yield return n;
                foreach (TreeNode child in n.Nodes.All ())
                    yield return child;
            }
        }
    }
}
