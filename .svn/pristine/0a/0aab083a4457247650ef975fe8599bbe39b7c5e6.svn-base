using ASUTP;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Reflection;
using System.ServiceModel;
using System.ServiceModel.Configuration;
using System.ServiceModel.Description;
using System.ServiceModel.Dispatcher;
using System.ServiceProcess;
using System.Text;
using Assignment;

namespace strans
{
    internal interface IDeployment
    {
    }

    internal abstract class Deployment : Assignment.Deployment
    {
        /// <summary>
        /// ??? Внимание - копия 'strans.Host'
        /// </summary>
        private ConfigSectionServiceSettings _serviceSettingsSection
        {
            get
            {
                return (ConfigSectionServiceSettings)ConfigurationManager.GetSection ($"{ConfigSectionServiceSettings.NameSection}");
            }
        }

        public Deployment (MODE mode)
            : base (LoadAssemblies, mode, typeof(NameEndPoint))
        {
        }

        public static Tuple<CommunicationState, ERROR, IEnumerable<Service>> LoadAssemblies ()
        {
            CommunicationState stateRes = CommunicationState.Faulted;
            ERROR errRes = ERROR.Unknown;
            List<Service> listServices = null;

            ConfigSectionServiceSettings serviceSettingsSection;

            IEnumerable<Assembly> allAsssemblies = null;
            List<Type> contractTypes = null
                , serviceTypes = null;

            string addresses = string.Empty;
            IEnumerable<NameEndPoint> nameEndPointServices =  null;

            try {
                listServices = new List<Service> ();

                // прочитать секцию в файле конфигурации
                serviceSettingsSection = (ConfigSectionServiceSettings)ConfigurationManager.GetSection ($"{ConfigSectionServiceSettings.NameSection}");

                allAsssemblies = FetchAssemblies ();

                // получить все типы контрактов развертываемых служб
                contractTypes = serviceSettingsSection.GetContractTypes (allAsssemblies);

                // проверить загрузку сборок для контрактов
                if (serviceSettingsSection.ContainsContractTypes (contractTypes) == true) {
                    // сборки для котрактов загружены
                    // загрузить сборки для служб
                    serviceSettingsSection.ServiceSettings.Cast<ConfigSectionServiceSettings.ServiceSettingsElement> ().ToList ()
                        .ForEach (sse => {
                            try {
                                Assembly svcAsm;
                                svcAsm = Assembly.LoadFrom ($"{AssemblyDirectory}/{sse.TAssembly}.dll");
                                if (Equals (svcAsm, null) == true)
                                    throw new InvalidOperationException ($"Assembliy a path <{AssemblyDirectory}/{sse.TAssembly}.dll> can't loaded...");
                                else
                                    ;
                            } catch (Exception e) {
                                throw new InvalidOperationException ($"Assembliy a path <{AssemblyDirectory}/{sse.TAssembly}.dll> can't loaded...", e);
                            }
                        });

                    //!!! обновить (добавить сборки для служб)
                    allAsssemblies = FetchAssemblies();
                    // получить все типы служб
                    serviceTypes = serviceSettingsSection.GetServicesTypes (AppDomain.CurrentDomain.GetAssemblies ().ToList ());

                    // проверить загрузку сборок для служб
                    if (serviceSettingsSection.ContainsServicesTypes (serviceSettingsSection.GetServicesTypes (AppDomain.CurrentDomain.GetAssemblies ().ToList ())) == true) {
                        // сборки для служб загружены
                        nameEndPointServices = (from see in serviceSettingsSection.ServiceSettings.Cast<ConfigSectionServiceSettings.ServiceSettingsElement> ()
                                select
                                    //(Creator.NameEndPoint)Enum.Parse(typeof(Creator.NameEndPoint), see.NameEndPoint)
                                    see.NameEndPoint
                            ).Cast<NameEndPoint>();

                        listServices = serviceSettingsSection.GetServices (serviceTypes, Assignment.Console.ListEndPoint);
                        listServices.ForEach (srv => srv.Create ());

                        errRes = ERROR.Ok;
                        stateRes = CommunicationState.Created;
                    } else {
                        // признак ошибки
                        errRes = ERROR.Service;
                    }
                } else {
                    // признак ошибки
                    errRes = ERROR.Contract;
                }
            } catch (Exception e) {
                string message = $"service settings section <{ConfigSectionServiceSettings.NameSection}> can't passed...{Environment.NewLine}message={e.Message}{Environment.NewLine}{e.StackTrace}...";
                itssAUX.Wait (message);
            } finally {
            }

            return Tuple.Create<CommunicationState, ERROR, IEnumerable<Service>> (stateRes, errRes, listServices);
        }

        public Type GetTypeContract (object nameEndPoint)
        {
            Service service;

            service = GetService (nameEndPoint);

            return (from type in _serviceSettingsSection.GetContractTypes(AppDomain.CurrentDomain.GetAssemblies ().ToList()) where type.FullName == ((ConfigSectionServiceSettings.ServiceSettingsElement)service.SSE).Contract select type).ElementAt(0);
        }

        public Type GetTypeService (object nameEndPoint)
        {
            return
                //_services.FirstOrDefault (service => service.SSE.NameEndPoint.Equals (nameEndPoint) == true).Type
                Type.EmptyTypes[0]
                ;
        }

        public Service GetService (object nameEndPoint)
        {
            return _services.FirstOrDefault (service => ((ConfigSectionServiceSettings.ServiceSettingsElement)service.SSE).NameEndPoint.Equals (nameEndPoint) == true);
        }

        public override string GetContractName (Assignment.ServiceHost host)
        {
            return $@"contract <{((ConfigSectionServiceSettings.ServiceSettingsElement)GetSSE (host.Description)).Contract}>";
        }

        private void debug (Assignment.ServiceHost host, string sense_message)
        {
            string mesToLog = string.Empty;

            mesToLog = $"Service {GetContractName(host)} {sense_message}...";

            itssAUX.PrintDebugMessage (mesToLog, false);
            Logging.Logg ().Debug (mesToLog, Logging.INDEX_MESSAGE.NOT_SET);
        }
    }

    static class ConfigSectionServiceSettingsExtensions
    {
        public static List<Type> GetContractTypes (this ConfigSectionServiceSettings settings, IEnumerable<Assembly> assemblies)
        {
            return (from asm in assemblies
                select (from type in asm.GetTypes ()
                    join contract in (from sse in settings.ServiceSettings.Cast<ConfigSectionServiceSettings.ServiceSettingsElement> () select sse.Contract) on type.FullName equals contract
                    select type)).SelectMany (t => t).ToList ();
        }

        public static List<Type> GetServicesTypes (this ConfigSectionServiceSettings settings, List<Assembly> assemblies)
        {
            return (from asm in assemblies
                select (from type in asm.GetTypes ()
                    join service in (from sse in settings.ServiceSettings.Cast<ConfigSectionServiceSettings.ServiceSettingsElement> () select sse.Type) on type.FullName equals service
                    select type)).SelectMany (t => t).ToList ();
        }

        public static bool ContainsContractTypes (this ConfigSectionServiceSettings settings, List<Type> contractTypes)
        {
            return (from sse in settings.ServiceSettings.Cast<ConfigSectionServiceSettings.ServiceSettingsElement> () select sse.CAssembly).ToList ()
                .TrueForAll (cassembly => {
                    return (from type in contractTypes where type.AssemblyQualifiedName.Contains (cassembly) select type).Count () > 0;
                });
        }

        public static bool ContainsServicesTypes (this ConfigSectionServiceSettings settings, List<Type> serviceTypes)
        {
            return (from sse in settings.ServiceSettings.Cast<ConfigSectionServiceSettings.ServiceSettingsElement> () select sse.TAssembly).ToList ()
                .TrueForAll (tassembly => {
                    return (from type in serviceTypes where type.AssemblyQualifiedName.Contains (tassembly) select type).Count () > 0;
                });
        }

        public static List<Assignment.Host.Service> GetServices (this ConfigSectionServiceSettings settings, List<Type> serviceTypes, List<ChannelEndpointElement> epChannels)
        {
            return (from sse in settings.ServiceSettings.Cast<ConfigSectionServiceSettings.ServiceSettingsElement> ()
                join serviceType in serviceTypes on sse.Type equals serviceType.FullName
                join ePointChannel in epChannels on sse.NameEndPoint equals Enum.Parse (typeof(NameEndPoint), ePointChannel.Name)
                    select new Assignment.Host.Service { Type = serviceType, SSE = sse, CEPE = ePointChannel, Error = Assignment.Deployment.ERROR.Ok })
                        .ToList ();
        }
    }
}
