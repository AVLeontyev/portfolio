using StatisticTrans.Contract;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.ServiceModel;
using System.Text;

namespace strans
{
    /// <summary>
    /// Контейнер клиентов служб
    ///  , обеспечивает взаимосвязь между непосредственно клентами служб и конфигурацией приложения развертывания
    /// </summary>
    internal partial class Client : Deployment
    {
        private Watcher<Console.NameEndPoint> _watch;

        /// <summary>
        /// Список объектов - клиентов служб
        /// </summary>
        private List<IWorker> _workers;

        /// <summary>
        /// Конструктор - основной
        /// </summary>
        /// <param name="mode">Режим развертывания для передачи в базовый класс</param>
        public Client (MODE mode)
            : base(null, mode)
        {
            ConfigSectionModesTrans clientSettings = null;
            IWorker worker;
            bool clientTurn = false;

            string messageReadFileConnSettResult = string.Empty
                , messageLog = string.Empty;

            try {
                clientSettings =
                    (ConfigSectionModesTrans)ConfigurationManager.GetSection ($"{ConfigSectionModesTrans.NameSection}");

                _watch = new Watcher<Console.NameEndPoint> (TimeSpan.FromMilliseconds(StatisticTrans.Default.TIMER_SERVICE_MIN_INTERVAL));
                _watch.Alarm += watch_OnAlarm;

                _workers = new List<IWorker> ();

                clientSettings.ModesTransSettings.Cast<ModesTransClientCollection> ().ToList ().ForEach (settings => {
                    clientTurn = false;
                    worker = null;
                    if (bool.TryParse (settings.GetValue ("turn"), out clientTurn) == true)
                        if (clientTurn == true) {
                            worker = createWorker(GetService (settings.NameEndPoint), settings);
                            if (Equals (worker, null) == false) {
                                _workers.Add (worker);

                                if (settings.ModeMashine == StatisticTrans.MODE_MASHINE.SERVICE_PERIOD)
                                    _watch.Add (settings.NameEndPoint);
                                else
                                    ;
                            } else
                                ;
                        } else {
                            messageLog = $@"client NameEndPoint=<{settings.NameEndPoint}> is turn={clientTurn}...";
                            ASUTP.Logging.Logg ().Warning (messageLog, ASUTP.Logging.INDEX_MESSAGE.NOT_SET);
                            itssAUX.PrintWarningMessage (messageLog, true);
                        }
                    else {
                        messageLog = $@"client NameEndPoint=<{settings.NameEndPoint}> is turn not recognized...";
                        ASUTP.Logging.Logg ().Warning (messageLog, ASUTP.Logging.INDEX_MESSAGE.NOT_SET);
                        itssAUX.PrintWarningMessage (messageLog, true);
                    }
                });
            } catch (Exception e) {
                ASUTP.Logging.Logg ().Exception (e, "strans.Client::ctor () - ...", ASUTP.Logging.INDEX_MESSAGE.NOT_SET);

                Error = ERROR.Client;
            }
        }

        /// <summary>
        /// Создать рабочий экземпляр для реализации логики вызовов методов службы
        /// </summary>
        /// <param name="service">Тип развернутой службы</param>
        /// <param name="settings">Конфигурация для инициализации экземпляра</param>
        /// <returns>Объект-экземпляр</returns>
        private IWorker createWorker (Service service, ModesTransClientCollection settings)
        {
            Dictionary<Console.NameEndPoint, Type> workerTypes = new Dictionary<Console.NameEndPoint, Type> {
                { Console.NameEndPoint.EndPointServiceTransModesTerminale, typeof(WorkerModesTerminale) }
                , { Console.NameEndPoint.EndPointServiceTransModesCentre, typeof(WorkerModesCentre) }
                , { Console.NameEndPoint.EndPointServiceTransTG, typeof(WorkerTransTG) }
                , { Console.NameEndPoint.EndPointServiceTransGTP, typeof(WorkerTransGTP) }
            };

            IWorker workerRes = null;

            int iReadFileConnSettResult = -1;
            ASUTP.Database.FIleConnSett fileConnSett;
            List<ASUTP.Database.ConnectionSettings> listConnSett;
            StatisticTrans.MODE_MASHINE modeMashine = StatisticTrans.MODE_MASHINE.UNKNOWN;
            List<int> listIdTECNotUse;
            string messageReadFileConnSettResult = string.Empty
                , messageLog = string.Empty;

            fileConnSett = new ASUTP.Database.FIleConnSett (settings.GetValue ("conn-sett"), ASUTP.Database.FIleConnSett.MODE.FILE);
            fileConnSett.ReadSettingsFile (-1, out listConnSett, out iReadFileConnSettResult, out messageReadFileConnSettResult);
            modeMashine = settings.ModeMashine;
            listIdTECNotUse = settings.ListIdTECNotUse;

            if (iReadFileConnSettResult == 0) {
                workerRes = (IWorker)Activator.CreateInstance (workerTypes [settings.NameEndPoint], settings.NameEndPoint, GetTypeContract (settings.NameEndPoint), service.Type);
                workerRes.Interrupt += worker_OnInterrupt;
                workerRes.Leave += delegate (Console.NameEndPoint nameEndPoint) {
                    _watch.Leave (nameEndPoint);
                };

                //TODO: Initialize
                switch (settings.NameEndPoint) {
                    case Console.NameEndPoint.EndPointServiceTransModesTerminale:
                        workerRes.Initialize (new InitializeArgument { m_ConnSett = listConnSett [0]
                            , m_iMainSourceData = settings.MainDataSource
                            , m_ModeMashine = modeMashine
                            , m_tsOverDate = settings.OverDate
                            , m_tsFetchWaking = TimeSpan.Zero
                            , m_ModeTECComponent = StatisticCommon.FormChangeMode.MODE_TECCOMPONENT.GTP
                            , m_listID_TECNotUse = listIdTECNotUse
                        });
                        break;
                    case Console.NameEndPoint.EndPointServiceTransModesCentre:
                        //TODO: получить доп./параметры из командной строки, из секции конфигурации

                        workerRes.Initialize (new InitializeModesCentreArgument { m_ConnSett = listConnSett [0]
                            , m_iMainSourceData = int.Parse (settings.GetValue ("Main DataSource"))
                            , m_HostSource = settings.GetValue ("MCServiceHost")
                            , m_ModeMashine = modeMashine
                            , m_tsOverDate = settings.OverDate
                            , m_tsFetchWaking = settings.FetchWaking
                            , m_jEventListener = settings.GetValue ("JEventListener")
                            , m_ModeTECComponent = StatisticCommon.FormChangeMode.MODE_TECCOMPONENT.GTP
                            , m_listID_TECNotUse = listIdTECNotUse
                        });
                        break;
                    case Console.NameEndPoint.EndPointServiceTransTG:
                        workerRes.Initialize (new InitializeArgument { m_ConnSett = listConnSett [0]
                            , m_iMainSourceData = settings.MainDataSource
                            , m_ModeMashine = modeMashine
                            , m_tsFetchWaking = TimeSpan.Zero
                            , m_ModeTECComponent = StatisticCommon.FormChangeMode.MODE_TECCOMPONENT.GTP
                            , m_listID_TECNotUse = listIdTECNotUse
                        });
                        break;
                    case Console.NameEndPoint.EndPointServiceTransGTP:
                        workerRes.Initialize(new InitializeArgument{m_ConnSett = listConnSett[0]
                            ,m_iMainSourceData = settings.MainDataSource
                            ,m_ModeMashine = modeMashine
                            ,m_tsFetchWaking = TimeSpan.Zero
                            ,m_ModeTECComponent = StatisticCommon.FormChangeMode.MODE_TECCOMPONENT.GTP
                            ,m_listID_TECNotUse = listIdTECNotUse
                        });
                        break;
                    default:
                        workerRes = null;
                        break;
                }
            } else {
                messageLog = $@"client NameEndPoint=<{settings.NameEndPoint}> file [{settings.GetValue ("conn - sett")}] not recognized...";
                ASUTP.Logging.Logg ().Warning (messageLog, ASUTP.Logging.INDEX_MESSAGE.NOT_SET);
                itssAUX.PrintWarningMessage (messageLog, true);
            }

            return workerRes;
        }

        private void watch_OnAlarm (Console.NameEndPoint nameEndPoint)
        {
            string message = string.Empty;

            message = "Client::watch_OnAlarm () - ...";
            ASUTP.Logging.Logg ().Error (message, ASUTP.Logging.INDEX_MESSAGE.NOT_SET);
            itssAUX.PrintErrorMessage (message);

            System.Threading.Tasks.Task.Factory.StartNew (() => {
                worker_OnInterrupt (nameEndPoint);
            });
        }

        private class WorkerComparer : IEqualityComparer<IWorker>
        {
            public bool Equals (IWorker x, IWorker y)
            {
                return x.NameEndPoint.Equals(y.NameEndPoint);
            }

            public int GetHashCode (IWorker obj)
            {
                return obj.NameEndPoint.GetHashCode () ^ obj.NameEndPoint.GetHashCode ();
            }
        }

        public override void Start (object obj = null)
        {
            _workers?.ForEach (worker => {
                worker?.Start ();
                _watch.Start (worker.NameEndPoint);
            });

            base.Start ();
        }

        public override void Stop ()
        {
            _workers?.ForEach (worker => {
                _watch.Stop (worker.NameEndPoint);
                worker?.Stop ();
            });

            base.Stop ();
        }

        private void worker_OnInterrupt (Console.NameEndPoint nameEndPoint)
        {
            IWorker worker = null;

            ConfigSectionModesTrans clientSettings = null;

            try {
                clientSettings =
                        (ConfigSectionModesTrans)ConfigurationManager.GetSection ($"{ConfigSectionModesTrans.NameSection}");

                worker = (from w in _workers where w.NameEndPoint.Equals(nameEndPoint) == true select w).FirstOrDefault();
                if (worker.NameEndPoint.Equals (Console.NameEndPoint.Empty) == false)
                    _workers.Remove (worker);
                else
                    ;

                do {
                    worker?.Stop ();
                    worker = null;

                    try {
                        worker = createWorker (GetService (nameEndPoint), (from s in clientSettings.ModesTransSettings.Cast<ModesTransClientCollection> () where s.NameEndPoint.Equals(nameEndPoint) select s).FirstOrDefault());

                        _watch.Leave (nameEndPoint);
                    } catch (Exception e) {
                        ASUTP.Logging.Logg ().Exception (e, "strans.Client::worker_OnInterrupt () - ...", ASUTP.Logging.INDEX_MESSAGE.NOT_SET);

                        itssAUX.PrintErrorMessage (e.Message);
                    }
                } while (Equals (worker, null) == true);

                _workers.Add (worker);

                worker?.Start ();
            } catch (Exception e) {
                ASUTP.Logging.Logg ().Exception (e, "strans.Client::worker_OnInterrupt () - ...", ASUTP.Logging.INDEX_MESSAGE.NOT_SET);

                itssAUX.PrintErrorMessage (e.Message);
            } finally {
            }
        }
    }

    internal class ServiceChannelFactory<T>
    {
        // Вариант №2 (T - требуемый тип контракта)

        #region Вариант №3 (T - базовый класс контрактов IServiceTransModes)
        //Type _typeChannelFactory
        //    , _typeContract
        //    , _typeService;
        #endregion

        public ServiceChannelFactory (
            //// вариант №3
            //Type typeChannelFactory, Type typeContract, Type typeService
            )
        {
            #region Вариант №3
            //if (typeContract.IsAssignableFrom (typeService) == true) {
            //    _typeChannelFactory = typeChannelFactory;
            //    _typeContract = typeContract;
            //    _typeService = typeService;
            //} else
            //    throw new InvalidCastException ($"<{_typeContract.FullName}> can't cast to target type <{_typeService.FullName}>");
            #endregion
        }

        public T Create (Action<StatisticTrans.Contract.ServiceCallbackResultEventArgs> fCallback, string nameEndPoint)
        {
            T tRes;

            InstanceContext instContext;

            instContext = new InstanceContext (new StatisticTrans.Contract.ServiceCallback (fCallback));

            #region Вариант №3
            //object channelFactory;
            //MethodInfo createChannel;

            //channelFactory = Activator.CreateInstance (_typeChannelFactory.MakeGenericType (new Type [] { _typeContract }), new object [] {instContext , nameEndPoint });
            //createChannel = _typeChannelFactory.GetMethod ("CreateChannel", new Type [] { });
            #endregion

            tRes =
                //(T2)Activator.CreateInstance(typeof(T1), new InstanceContext (new ServiceCallback (fCallback)), nameEndPoint)
                // вариант №2
                new System.ServiceModel.DuplexChannelFactory<T> (instContext, nameEndPoint).CreateChannel()
                //// вариант №3, исключение, т.к. '_typeChannelFactory' содержит обязательный тип при инициализации
                //(T)createChannel.Invoke (channelFactory, null)
                ;

            return tRes;
        }
    }
}
