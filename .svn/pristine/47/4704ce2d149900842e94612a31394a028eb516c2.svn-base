using System;
//using System.Windows.Forms;
using System.IO;
using System.Data;
using System.Collections.Generic;
using System.Threading;

//using HClassLibrary;
using StatisticCommon;
using ASUTP.Core;
using ASUTP.Database;
using ASUTP;
using StatisticCommon.Contract.Alarm;
using System.Linq;

namespace SAlarm.Service
{
    partial class AdminAlarm
    {
        public enum STATUS { NAN, NORMAL, WARNING, ERROR }

        private List<TecViewAlarm> m_listTecView;

        public IEnumerable<TEC> m_list_tec
        {
            get
            {
                return from tv in m_listTecView select tv.m_tec;
            }
        }

        private object lockValue;

        private
            System.Threading.Timer
            //System.Windows.Forms.Timer
                m_timerAlarm;

        /// <summary>
        /// Интервал времени (милисекунды) между опросами по проверке выполнения условий сигнализаций
        /// </summary>
        public static volatile int MSEC_ALARM_TIMERUPDATE = -1;
        /// <summary>
        /// Интервал принудительного(безусловного) обновления информации из БД
        /// </summary>
        public static volatile int MSEC_ALARM_UPDATE = 1000;

        public static volatile int MSEC_ALARM_MAX_UPDATE = MSEC_ALARM_UPDATE + 2000;
        /// <summary>
        /// Период времени (милисекунды) от даты/времени регистрации события сигнализации
        ///  , в течение которого (только в случае подтверждения) выполнение условия сигнализации
        ///  не является основанием для его регистрации с новым идентификатором.
        ///  В противном случае (НЕподтверждения) пользователь оповещается повторно.
        /// </summary>
        public static volatile int MSEC_ALARM_EVENTRETRY = -1;
        /// <summary>
        /// Интервал времени (милисекунды) при периодическом воспроизведении звукового файла
        /// </summary>
        public static volatile int MSEC_ALARM_TIMERBEEP = -1;
        /// <summary>
        /// Строка - наименование (звукового) файла
        ///  , воспроизводящегося при оповещении пользователя оо событии сигнализации
        /// </summary>
        public static string FNAME_ALARM_SYSTEMMEDIA_TIMERBEEP = string.Empty;
        /// <summary>
        /// Обработчик события - регистрация события сигнализации от 'TecView'
        /// </summary>
        /// <param name="events">Аргумент события сигнализации</param>
        private void onEventReg(IEnumerable <TecViewAlarm.AlarmTecViewEventArgs> events)
        {
            INDEX_ACTION iAction = INDEX_ACTION.NOTHING;
            StatesMachine state = StatesMachine.Unknown;
            Lazy<List<object[]>> listToPush = new Lazy<List<object[]>> ();
            DateTime stampNewRegistred;

            foreach (TecViewAlarm.AlarmTecViewEventArgs ev in events) {
                lock (m_dictAlarmObject) {
                    iAction = m_dictAlarmObject.Registred (ev, out stampNewRegistred);
                }

                if (iAction == INDEX_ACTION.ERROR)
                    throw new Exception(@"AdminAlarm::OnEventReg_TecView () - ...");
                else
                {
                    if ((iAction == INDEX_ACTION.RETRY)
                        && (stampNewRegistred < DateTime.MaxValue))
                        ev.m_dtRegistred = stampNewRegistred;
                    else
                        ;

                    state = iAction.Translate ();

                    if (!(state == StatesMachine.Unknown))
                        listToPush.Value.Add (new object[] { state, ev });
                    else
                        ;
                }
            }

            if (listToPush.Value.Count > 0)
                push (listToPush.Value.ToArray (), false);
            else
                ;
        }

        private DelegateStringFunc errorReport
            , warningReport
            , actionReport;
        private DelegateBoolFunc reportClear;

        private DelegateIntFunc requestDone;
        private Action<DateTime, bool> readyData;
        private DelegateIntFunc errorData;

        public void SetDelegateWait(DelegateFunc fStart, DelegateFunc fStop, DelegateFunc fStatus)
        {
            m_handlerDb.SetDelegateWait(fStart, fStop, fStatus);
        }

        public void SetDelegateReport(DelegateStringFunc ferr, DelegateStringFunc fwar, DelegateStringFunc fact, DelegateBoolFunc fclr)
        {
            errorReport = ferr;
            warningReport = fwar;
            actionReport = fact;
            reportClear = fclr;

            m_handlerDb.SetDelegateReport(ferr, fwar, fact, fclr);
        }

        public void SetDelegateDatetime(DelegateDateFunc f)
        {
            //m_handlerDb.SetDelegateDatetime(f);
            Logging.Logg ().Warning ($@"SAlarm.Service.AdminAlarm::SetDelegateDatetime () - не определена...", Logging.INDEX_MESSAGE.NOT_SET);
        }

        public void SetDelegateData(DelegateIntFunc fReqDone, Action<DateTime, bool> fSucRes, Action<int, object, bool> fStateRes, DelegateIntFunc fErrRes)
        {
            requestDone = fReqDone;
            readyData = fSucRes;
            errorData = fErrRes;
            //m_handlerDb.SetDelegateData();
            Logging.Logg ().Warning ($@"SAlarm.Service.AdminAlarm::SetDelegateData () - не определена в полном объеме...", Logging.INDEX_MESSAGE.NOT_SET);
        }

        public void SetDelegateSaveComplete(DelegateIntFunc f)
        {
            //m_handlerDb.SetDelegateSaveComplete();
            Logging.Logg ().Warning ($@"SAlarm.Service.AdminAlarm::SetDelegateSaveComplete () - не определена...", Logging.INDEX_MESSAGE.NOT_SET);
        }

        public void InitTEC (List<StatisticCommon.TEC> listTEC, HMark markQueries)
        {
            TecViewAlarm tecView;
            m_listTecView = new List<TecViewAlarm> ();

            //HMark markQueries = new HMark ();
            //markQueries.Marked((int)StatisticCommon.CONN_SETT_TYPE.ADMIN);
            //markQueries.Marked((int)StatisticCommon.CONN_SETT_TYPE.PBR);
            //markQueries.Marked((int)StatisticCommon.CONN_SETT_TYPE.DATA_AISKUE);
            //markQueries.Marked((int)StatisticCommon.CONN_SETT_TYPE.DATA_SOTIASSO);
            ////markQueries.Marked((int)CONN_SETT_TYPE.DATA_SOTIASSO_3_MIN);
            ////markQueries.Marked((int)CONN_SETT_TYPE.DATA_SOTIASSO_1_MIN);

            //Отладка ???!!!
            int DEBUG_ID_TEC = -1;
            foreach (StatisticCommon.TEC t in listTEC) {
                if ((DEBUG_ID_TEC == -1) || (DEBUG_ID_TEC == t.m_id)) {
                    tecView = new TecViewAlarm (new FormChangeMode.KeyDevice () { Id = t.m_id, Mode = FormChangeMode.MODE_TECCOMPONENT.TEC });
                    m_listTecView.Add (tecView);

                    tecView.InitTEC (new List<StatisticCommon.TEC> { t }, markQueries);
                    tecView.EventReg += new TecViewAlarm.AlarmTecViewEventHandler (onEventReg);

                    tecView.SetDelegateReport (errorReport, warningReport, actionReport, reportClear);
                    tecView.SetDelegateData (readyData, errorData);

                    tecView.m_arTypeSourceData[(int)HDateTime.INTERVAL.MINUTES] = StatisticCommon.CONN_SETT_TYPE.DATA_SOTIASSO_1_MIN;
                    tecView.m_arTypeSourceData[(int)HDateTime.INTERVAL.HOURS] = StatisticCommon.CONN_SETT_TYPE.DATA_SOTIASSO_1_MIN;
                } else;
            }

            #region Подписка на события 'HandlerDb'
            m_listTecView.ForEach (tc => m_handlerDb.EventCurrentTimeDone += tc.OnEventServerTimeDone);

            m_listTecView.ForEach (tc => {
                if (Mode.HasFlag (MODE.REGISTER) == true)
                    _eventValuesDone += tc.OnRegisterValues;
                else if (Mode.HasFlag (MODE.LAST_VALUES) == true) {
                    _eventValuesDone += tc.OnParseLastValues;
                    tc.EventListRequestResult += tecViewAlarm_onEventListRequestResult;
                } else
                    ;
            });
            m_handlerDb.EventValuesDone += (key, table) => _eventValuesDone?.Invoke (key, table, _runable);
            #endregion

            actionReport?.Invoke ($@"SAlarm.Service.AdminAlarm::InitTEC () - ...");
        }

        private delegate void EventValuesDoneHandler (Tuple<DateTime, TYPE_ALARM> key, DataTable table, TYPE_ALARM alarmed);
        private event EventValuesDoneHandler _eventValuesDone;

        private void tecViewAlarm_onEventListRequestResult (IEnumerable<StatisticCommon.OICDAC.DbInterface.RequestResult> listReadRequestResult)
        {
            System.Threading.Tasks.Task.Factory.StartNew (() => {
                EventListRequestResult?.Invoke (listReadRequestResult);
            });
        }

        private void changeState ()
        {
            foreach (TecViewAlarm tv in m_listTecView) {
                if (IsRegistredRequired == true) { //??? проверка требуется ли регистрация событий (? тогда зачем создавался объект)
                    if (GetAlarmRegistredRequired (TYPE_ALARM.CUR_POWER) == true) {
                        //(Отмена)Регистрация источника - БД конфигурации при вкл./выкл таймера 'm_timerAlarm' (метод: activateAdminAlarm)
                        //??? синхронное обращение к БД конфигурации
                        tv.m_tec.PerformUpdate (DbTSQLConfigDatabase.DbConfig ().ListenerId);
                    } else
                        ;
                } else
                    ;
            }

            // асинхронно запросить все требуемые параметры
            GetRDGValues (m_dtCurrent.Date);

            requestDone?.Invoke (Count);
            actionReport?.Invoke ($@"SAlarm.Service.AdminAlarm::changeState () - ...");

            #region Контроль за количеством событий в очереди
            int prevCounter = -1;
            _listCounterOverload.Add (Count);
            if (_listCounterOverload.Count > LIST_COUNTEROVERLOAD_SIZE) {
                _listCounterOverload.RemoveAt (0);
                // проверять, только при накоплении достаточной статистики
                foreach (int counter in _listCounterOverload) {
                    if (prevCounter < 0)
                        prevCounter = counter;
                    else {
                        if (counter > prevCounter) {
                            prevCounter = counter;
                        } else {
                            prevCounter = -1;
                            break;
                        }
                    }
                }
            } else
                ;

            if (prevCounter > 0)
            // фатальное завершение с отрицательным кодом, иначе просто ошибка при обработке состояния (аргумента)
                errorData (-1 * Count);
            else
                ;
            #endregion
        }

        #region Контроль за количеством событий в очереди; при выходе за границу - аварийно завершить службу
        private const int LIST_COUNTEROVERLOAD_SIZE = 12;
        private List<int> _listCounterOverload;
        #endregion

        private void fTimerAlarm_Tick(Object stateInfo)
        //private void TimerAlarm_Tick(Object stateInfo, EventArgs ev)
        {
            bool bIsCahngeStateRunable = false
                , bIsTimerAlarmChanged = true;
            int due = MSEC_ALARM_UPDATE;

            lock (lockValue) {
                // ожидать завершения потока обработки запроса текущих событий
                if (m_mEvtAlarmDbEventUpdated.WaitOne (TIMEOUT_DBEVENT_UPDATE) == true)
                // changeState, m_timerAlarm?.Change - в ~ от признака "Старт"
                // m_timerAlarm?.Change - обновление через стандартный интервал
                    bIsCahngeStateRunable =
                    bIsTimerAlarmChanged =
                        IsStarted;
                else
                // changeState - не выполняется
                // m_timerAlarm?.Change - обновление через незначительный интервал
                    due = TIMEOUT_DBEVENT_UPDATE;

                if (bIsCahngeStateRunable == true)
                    changeState ();
                else
                    ;

                if (bIsTimerAlarmChanged == true)
                    m_timerAlarm?.Change (due, System.Threading.Timeout.Infinite); // PanelStatistic.POOL_TIME * 1000
                else
                    ;
            }
        }

        /// <summary>
        /// Изменить состояние ТГ (вкл./выкл.)
        /// </summary>
        /// <param name="id_tg">Идентификатор ТГ</param>
        /// <param name="state">Новое состояние ТГ</param>
        private void tgConfirm(int id_tg, StatisticCommon.TG.INDEX_TURNOnOff state)
        {
            TECComponent tc = null;

            if (! (state == TG.INDEX_TURNOnOff.UNKNOWN))
                foreach (TecView tv in m_listTecView)
                {
                    tc = tv.FindTECComponent(id_tg);

                    if ((!(tc == null))
                        && (tc.IsTG == true))
                        if (!((tc.ListLowPointDev[0] as TG).m_TurnOnOff == state))
                        {
                            (tc.ListLowPointDev[0] as TG).m_TurnOnOff = state;
                            Logging.Logg().Action(@"AdminAlarm::tgConfirm (id=" + id_tg + @") - ТГ состояние=" + state.ToString (), Logging.INDEX_MESSAGE.NOT_SET);
                        }
                        else
                            Logging.Logg().Warning(@"AdminAlarm::tgConfirm (id=" + id_tg + @") - попытка подтвердить ТО ЖЕ состояние ТГ...", Logging.INDEX_MESSAGE.NOT_SET);
                    else
                        ;
                }
            else
                Logging.Logg().Error(@"AdminAlarm::tgConfirm (id=" + id_tg + @") - попытка подтвердить состояние ТГ как НЕИЗВЕСТНОЕ...", Logging.INDEX_MESSAGE.NOT_SET);
        }

        public static bool IsFreqValidate (float v)
        {
            return TecView.IsValueValidate(v) == true
                && (Math.Abs (StatisticCommon.Constants.FrequencyOptimum - v) < StatisticCommon.Constants.FreqDeviation[(int)STATUS.NORMAL]);
        }

        public static float GetDelta (float curr, float prev)
        {
            return
                //(IsValueValidate(curr) == true) ? StatisticCommon.Constants.FrequencyOptimum - curr
                ((TecView.IsValueValidate (curr) == true) && (TecView.IsValueValidate (prev) == true))
                    ? curr - prev
                        : -1;
        }

        public static STATUS GetStatus (StatisticCommon.OICDAC.DbInterface.OIKParameter param, float curr, float prev)
        {
            float delta = -1F;

            delta = GetDelta(curr, prev);

            return GetStatus(param, delta);
        }

        public static STATUS GetStatus (StatisticCommon.OICDAC.DbInterface.OIKParameter param, float delta)
        {
            float aDelta = -1;

            Dictionary<StatisticCommon.OICDAC.DbInterface.OIKParameter, Func<STATUS, float>> dictFuncDeviation = new Dictionary<StatisticCommon.OICDAC.DbInterface.OIKParameter, Func<STATUS, float>> () {
                { StatisticCommon.OICDAC.DbInterface.OIKParameter.APOWER, (status) => { return StatisticCommon.Constants.APowDeviation[(int)status]; } }
                , { StatisticCommon.OICDAC.DbInterface.OIKParameter.FREQUENCY, (status) => { return StatisticCommon.Constants.FreqDeviation[(int)status]; } }
            };

            aDelta = Math.Abs (delta);

            return (TecView.IsValueValidate (delta) == true)
                ? aDelta > dictFuncDeviation[param] (STATUS.ERROR) ? STATUS.ERROR
                    : aDelta > dictFuncDeviation[param] (STATUS.WARNING) ? STATUS.WARNING
                        : STATUS.NORMAL
                            : STATUS.NAN;
        }

        #region Отчет MS Excel
        public struct TypeAlarmValue : AdminAlarm.IITEMVALUE
        {
            public TYPE_ALARM Tag;

            public object Value { get; }
        }

        private AdminAlarm.MSExcelIOReport<TypeAlarmValue> _msExcelIOReport;
        public event Action<AdminAlarm.MSExcelIOReport<TypeAlarmValue>.EventResultArgs> EventExportPBRValues;

        private void msExcelIOExportPBRValues_onResult(object sender, AdminAlarm.MSExcelIOReport<TypeAlarmValue>.EventResultArgs e)
        {
            string errMes = string.Empty;

            switch (e.Result) {
                case AdminAlarm.MSExcelIOReport<TypeAlarmValue>.RESULT.OK:
                    break;
                case AdminAlarm.MSExcelIOReport<TypeAlarmValue>.RESULT.VISIBLE:
                    //??? не забывать о различной природе свойства (~ HCLASSLIBRARY_MSEXCELIO)
                    if (_msExcelIOReport.AllowVisibled == true)
                        _msExcelIOReport.Visible = true;
                    else
                        ;
                    break;
                case AdminAlarm.MSExcelIOReport<TypeAlarmValue>.RESULT.SHEDULE:
                    EventExportPBRValues (e);
                    break;
                case AdminAlarm.MSExcelIOReport<TypeAlarmValue>.RESULT.ERROR_OPEN:
                    errMes = string.Format ("Не удалось открыть книгу для экспорта ПБР-значений");
                    break;
                case AdminAlarm.MSExcelIOReport<TypeAlarmValue>.RESULT.ERROR_RETRY:
                    errMes = string.Format ("Попытка повторно открыть книгу для экспорта ПБР-значений");
                    break;
                case AdminAlarm.MSExcelIOReport<TypeAlarmValue>.RESULT.ERROR_TEMPLATE:
                    errMes = string.Format ("Не найден шаблон для экспорта ПБР-значений");
                    break;
                case AdminAlarm.MSExcelIOReport<TypeAlarmValue>.RESULT.ERROR_WAIT:
                    errMes = string.Format("Превышено время ожидания({0} сек) при экспорте ПБР-значений", StatisticCommon.Constants.MS_WAIT_MSEXCEL_REPORT_MAX / 1000);
                    break;
                case AdminAlarm.MSExcelIOReport<TypeAlarmValue>.RESULT.ERROR_APP:
                    errMes = string.Format ("Нет отклика от MS Excel при экспорте ПБР-значений");
                    break;
                default:
                    break;
            }

            //TODO: HandlerQueue не наследует набор методов 'HandlerQueue'
            //if (errMes.Equals (string.Empty) == false)
            //    ErrorReport (errMes);
            //else
            //    ;
        }
        #endregion
    }

    public static class IndexActionExtensions
    {
        public static AdminAlarm.StatesMachine Translate (this INDEX_ACTION target)
        {
            return target == INDEX_ACTION.NEW ? AdminAlarm.StatesMachine.Insert
                : target == INDEX_ACTION.RETRY ? AdminAlarm.StatesMachine.Retry
                    : target == INDEX_ACTION.NOTHING ? AdminAlarm.StatesMachine.Unknown
                        : AdminAlarm.StatesMachine.Unknown;
        }
    }
}
