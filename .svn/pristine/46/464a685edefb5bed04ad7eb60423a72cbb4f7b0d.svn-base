using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StatisticCommon
{
    public class Area : IObject
    {
        private enum FIELDS
        {
            ID
            , NAME_SHR, NAME
            , ABBR
        }

        public int m_id { get; private set; }

        public string name_shr { get; private set; }

        public string Name { get; private set; }

        public string Abbr { get; }

        private Area ()
        {
            m_id = -1;
            name_shr =
            Name =
            Abbr =
                string.Empty;
        }

        public Area (int id, string name_shr, string name, string abbr)
            : this ()
        {
            m_id = id;
            this.name_shr = name_shr.Trim();
            this.Name = name.Trim();
            Abbr = abbr.Trim();
        }

        public Area (System.Data.DataRow[] rows)
            : this (int.Parse (rows[0][FIELDS.ID.ToString()].ToString())
                  , rows[0][FIELDS.NAME_SHR.ToString()].ToString()
                  , rows[0][FIELDS.NAME.ToString()].ToString()
                  , rows[0][FIELDS.ABBR.ToString()].ToString())
        {
        }

        /// <summary>
        /// Конструктор - дополнительный (с аргументами)
        ///  для краткого создания объекта - ВСЕ филиалы
        /// </summary>
        /// <param name="id">Идентификатор филиала (всегда = 0)</param>
        /// <param name="desc"></param>
        public Area (int id = 0, params string[]desc)
            : this (id, string.Empty, string.Empty, string.Empty)
        {
            if (!(id == 0))
                throw new Exception ($"Area::ctor () - Указан идентификатор <{id}> филиала для конструктора для ВСЕ филиалы ...");
            else
                ;
        }
    }

    public class AreaComparer : IEqualityComparer<Area>
    {
        public bool Equals (Area obj1, Area obj2)
        {
            return ((Equals(obj1, null) == false)
                    && (Equals(obj2, null) == false))
                && (obj1.m_id == obj2.m_id);
        }

        public bool Equals<Area> (object obj1, object obj2)
        {
            return (typeof(Area).IsAssignableFrom(obj1.GetType()) == true)
                && (obj1.GetType().Equals(obj2.GetType()) == true)
                && ((Area)obj1).Equals((Area)obj2);
        }

        public int GetHashCode (Area obj)
        {
            return base.GetHashCode();
        }
    }
}
